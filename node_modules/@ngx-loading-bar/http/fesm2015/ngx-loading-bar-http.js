import { LoadingBarService, LoadingBarModule } from '@ngx-loading-bar/core';
import { Injectable, NgModule } from '@angular/core';
import { ConnectionBackend, Http, RequestOptions, HttpModule, XHRBackend } from '@angular/http';
import { finalize } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LoadingBarHttp extends Http {
    /**
     * @param {?} _backend
     * @param {?} _defaultOptions
     * @param {?} loadingBar
     */
    constructor(_backend, _defaultOptions, loadingBar) {
        super(_backend, _defaultOptions);
        this.loadingBar = loadingBar;
    }
    /**
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    request(url, options) {
        /** @type {?} */
        let headers = options && options.headers;
        if (!headers && url && ((/** @type {?} */ (url))).headers) {
            headers = ((/** @type {?} */ (url))).headers;
        }
        if (headers && headers.has('ignoreLoadingBar')) {
            headers.delete('ignoreLoadingBar');
            return super.request(url, options);
        }
        /** @type {?} */
        const response$ = super.request(url, options);
        if (options && options.ignoreLoadingBar === true) {
            return response$;
        }
        /** @type {?} */
        let started = false;
        /** @type {?} */
        const responseSubscribe = response$.subscribe.bind(response$);
        response$.subscribe = (...args) => {
            this.loadingBar.start();
            started = true;
            return responseSubscribe(...args);
        };
        return response$.pipe(finalize(() => started && this.loadingBar.complete()));
    }
}
LoadingBarHttp.decorators = [
    { type: Injectable }
];
/** @nocollapse */
LoadingBarHttp.ctorParameters = () => [
    { type: ConnectionBackend },
    { type: RequestOptions },
    { type: LoadingBarService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} xhrBackend
 * @param {?} requestOptions
 * @param {?} loadingBarService
 * @return {?}
 */
function httpFactory(xhrBackend, requestOptions, loadingBarService) {
    return new LoadingBarHttp(xhrBackend, requestOptions, loadingBarService);
}
class LoadingBarHttpModule {
}
LoadingBarHttpModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    HttpModule,
                    LoadingBarModule,
                ],
                exports: [
                    HttpModule,
                    LoadingBarModule,
                ],
                providers: [
                    { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions, LoadingBarService] },
                ],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { LoadingBarHttpModule, LoadingBarHttp, httpFactory as Éµa };

//# sourceMappingURL=ngx-loading-bar-http.js.map