{"version":3,"file":"ngx-loading-bar-http.js.map","sources":["ng://@ngx-loading-bar/http/loading-bar.http.ts","ng://@ngx-loading-bar/http/http.module.ts"],"sourcesContent":["import { LoadingBarService } from '@ngx-loading-bar/core';\nimport { Injectable } from '@angular/core';\nimport { ConnectionBackend, Http, Request, RequestOptions, RequestOptionsArgs, Response } from '@angular/http';\nimport { Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\n\nexport interface LoadingBarRequestOptionsArgs extends RequestOptionsArgs {\n  ignoreLoadingBar?: boolean;\n}\n\n@Injectable()\nexport class LoadingBarHttp extends Http {\n  constructor(_backend: ConnectionBackend, _defaultOptions: RequestOptions, private loadingBar: LoadingBarService) {\n    super(_backend, _defaultOptions);\n  }\n\n  request(url: string | Request, options?: LoadingBarRequestOptionsArgs): Observable<Response> {\n    let headers = options && options.headers;\n    if (!headers && url && (<Request> url).headers) {\n      headers = (<Request> url).headers;\n    }\n\n    if (headers && headers.has('ignoreLoadingBar')) {\n      headers.delete('ignoreLoadingBar');\n\n      return super.request(url, options);\n    }\n\n    const response$ = super.request(url, options);\n    if (options && options.ignoreLoadingBar === true) {\n      return response$;\n    }\n\n    let started = false;\n    const responseSubscribe = response$.subscribe.bind(response$);\n    response$.subscribe = (...args) => {\n      this.loadingBar.start();\n      started = true;\n      return responseSubscribe(...args);\n    };\n\n    return response$.pipe(\n      finalize(() => started && this.loadingBar.complete()),\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { HttpModule, Http, XHRBackend, RequestOptions } from '@angular/http';\nimport { LoadingBarModule, LoadingBarService } from '@ngx-loading-bar/core';\nimport { LoadingBarHttp } from './loading-bar.http';\n\nexport function httpFactory(xhrBackend: XHRBackend, requestOptions: RequestOptions, loadingBarService: LoadingBarService): Http {\n  return new LoadingBarHttp(xhrBackend, requestOptions, loadingBarService);\n}\n\n@NgModule({\n  imports: [\n    HttpModule,\n    LoadingBarModule,\n  ],\n  exports: [\n    HttpModule,\n    LoadingBarModule,\n  ],\n  providers: [\n    { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions, LoadingBarService] },\n  ],\n})\nexport class LoadingBarHttpModule {}\n"],"names":["tslib_1.__extends"],"mappings":";;;;;;;;;;;IAWoCA,kCAAI;IACtC,wBAAY,QAA2B,EAAE,eAA+B,EAAU,UAA6B;QAA/G,YACE,kBAAM,QAAQ,EAAE,eAAe,CAAC,SACjC;QAFiF,gBAAU,GAAV,UAAU,CAAmB;;KAE9G;;;;;;IAED,gCAAO;;;;;IAAP,UAAQ,GAAqB,EAAE,OAAsC;QAArE,iBA4BC;;YA3BK,OAAO,GAAG,OAAO,IAAI,OAAO,CAAC,OAAO;QACxC,IAAI,CAAC,OAAO,IAAI,GAAG,IAAI,oBAAW,GAAG,IAAE,OAAO,EAAE;YAC9C,OAAO,GAAG,oBAAW,GAAG,IAAE,OAAO,CAAC;SACnC;QAED,IAAI,OAAO,IAAI,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE;YAC9C,OAAO,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;YAEnC,OAAO,iBAAM,OAAO,YAAC,GAAG,EAAE,OAAO,CAAC,CAAC;SACpC;;YAEK,SAAS,GAAG,iBAAM,OAAO,YAAC,GAAG,EAAE,OAAO,CAAC;QAC7C,IAAI,OAAO,IAAI,OAAO,CAAC,gBAAgB,KAAK,IAAI,EAAE;YAChD,OAAO,SAAS,CAAC;SAClB;;YAEG,OAAO,GAAG,KAAK;;YACb,iBAAiB,GAAG,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC;QAC7D,SAAS,CAAC,SAAS,GAAG;YAAC,cAAO;iBAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;gBAAP,yBAAO;;YAC5B,KAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;YACxB,OAAO,GAAG,IAAI,CAAC;YACf,OAAO,iBAAiB,wBAAI,IAAI,GAAE;SACnC,CAAC;QAEF,OAAO,SAAS,CAAC,IAAI,CACnB,QAAQ,CAAC,cAAM,OAAA,OAAO,IAAI,KAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,GAAA,CAAC,CACtD,CAAC;KACH;;gBAlCF,UAAU;;;;gBARF,iBAAiB;gBAAiB,cAAc;gBAFhD,iBAAiB;;IA6C1B,qBAAC;CAAA,CAlCmC,IAAI;;;;;;ACXxC;;;;;;AAKA,SAAgB,WAAW,CAAC,UAAsB,EAAE,cAA8B,EAAE,iBAAoC;IACtH,OAAO,IAAI,cAAc,CAAC,UAAU,EAAE,cAAc,EAAE,iBAAiB,CAAC,CAAC;CAC1E;AAED;IAAA;KAaoC;;gBAbnC,QAAQ,SAAC;oBACR,OAAO,EAAE;wBACP,UAAU;wBACV,gBAAgB;qBACjB;oBACD,OAAO,EAAE;wBACP,UAAU;wBACV,gBAAgB;qBACjB;oBACD,SAAS,EAAE;wBACT,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,UAAU,EAAE,cAAc,EAAE,iBAAiB,CAAC,EAAE;qBAClG;iBACF;;IACkC,2BAAC;CAbpC;;;;;;;;;;;;;;"}
