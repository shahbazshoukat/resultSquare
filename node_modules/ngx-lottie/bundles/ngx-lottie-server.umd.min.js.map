{"version":3,"sources":["ng://ngx-lottie/server/internals.ts","ng://ngx-lottie/server/utils.ts","ng://ngx-lottie/server/lottie-server.module.ts"],"names":["readAndTransferAnimationData","transferState","animations","pathsToAnimations","sources","i","length_1","source","path","Promise","resolve","reject","readFile","error","data","toString","readFileWithAnimationData","then","animationData","state","animation","transformAnimationFilenameToKey","key","makeStateKey","set","JSON","parse","transferAnimationData","push","length","appInitializerFactory","options","preloadAnimations","folder","join","process","cwd","map","all","LOTTIE_SERVER_OPTIONS","InjectionToken","LottieServerModule","forRoot","ngModule","providers","provide","useValue","APP_INITIALIZER","useFactory","multi","deps","TransferState","NgModule"],"mappings":"keAQA,SAASA,EACPC,EACAC,EACAC,GAIA,QAFMC,EAA2B,cAExBC,EAAOC,OAGRC,ECdV,SAA0CC,GACxC,OAAO,IAAIC,SAAO,SAAiBC,EAASC,GAC1CC,EAAAA,SAASJ,GAAI,SAAGK,EAAOC,GACrB,GAAID,EACF,OAAOF,EAAOE,GAGhBH,EAAQI,EAAKC,kBDOAC,CAFFb,EAAkBE,IAEgBY,MAAI,SAACC,IAUxD,SACEC,EACAC,EACAF,GAEAE,EAAYC,EAAAA,gCAAgCD,OACtCE,EAAMC,EAAAA,aAAaH,GACzBD,EAAMK,IAAIF,EAAKG,KAAKC,MAAMR,IAhBtBS,CAAsB1B,EAAeC,EAAWG,GAAIa,MAGtDd,EAAQwB,KAAKrB,IAPNF,EAAI,EAAGC,EAASJ,EAAW2B,OAAQxB,EAAIC,EAAQD,MAA/CA,GAUT,OAAOD,EAaT,SAAgB0B,EAAsBC,EAA8BZ,OAW/Ba,EAC3BC,EAAQ/B,EACVM,EAZAL,GAU6B6B,EAVUD,EAUVC,kBAC3BC,EAAAD,EAAAC,OAAQ/B,EAAA8B,EAAA9B,WACVM,EAAO0B,EAAAA,KAAKC,QAAQC,MAAOH,GAE1B/B,EAAWmC,KAAG,SAACjB,GAAa,OAAAc,EAAAA,KAAK1B,EAAMY,OAbxChB,EAAUJ,EACdmB,EACAY,EAAQC,kBAAkB9B,WAC1BC,GAGF,OAAA,WAAa,OAAAM,QAAQ6B,IAAIlC,IExC3B,IAAamC,EAAwB,IAAIC,EAAAA,eAAoC,uBAE7EC,EAAA,WAAA,SAAAA,KAmBA,OAjBSA,EAAAC,QAAP,SAAeX,GACb,MAAO,CACLY,SAAUF,EACVG,UAAW,CACT,CACEC,QAASN,EACTO,SAAUf,GAEZ,CACEc,QAASE,EAAAA,gBACTC,WAAYlB,EACZmB,OAAO,EACPC,KAAM,CAACX,EAAuBY,EAAAA,uCAdvCC,EAAAA,WAmBDX,EAnBA","sourcesContent":["import { join } from 'path';\nimport { TransferState, makeStateKey } from '@angular/platform-browser';\n\nimport { AnimationFilename, transformAnimationFilenameToKey } from 'ngx-lottie';\n\nimport { readFileWithAnimationData } from './utils';\nimport { LottieServerOptions, PathToAnimation, AnimationData } from './symbols';\n\nfunction readAndTransferAnimationData(\n  transferState: TransferState,\n  animations: AnimationFilename[],\n  pathsToAnimations: PathToAnimation[]\n): Promise<void>[] {\n  const sources: Promise<void>[] = [];\n\n  for (let i = 0, length = animations.length; i < length; i++) {\n    const path = pathsToAnimations[i];\n\n    const source = readFileWithAnimationData(path).then(animationData => {\n      transferAnimationData(transferState, animations[i], animationData);\n    });\n\n    sources.push(source);\n  }\n\n  return sources;\n}\n\nfunction transferAnimationData(\n  state: TransferState,\n  animation: AnimationFilename,\n  animationData: AnimationData\n): void {\n  animation = transformAnimationFilenameToKey(animation);\n  const key = makeStateKey(animation);\n  state.set(key, JSON.parse(animationData));\n}\n\nexport function appInitializerFactory(options: LottieServerOptions, state: TransferState) {\n  const pathsToAnimations = resolveLottiePaths(options);\n  const sources = readAndTransferAnimationData(\n    state,\n    options.preloadAnimations.animations,\n    pathsToAnimations\n  );\n\n  return () => Promise.all(sources);\n}\n\nexport function resolveLottiePaths({ preloadAnimations }: LottieServerOptions): PathToAnimation[] {\n  const { folder, animations } = preloadAnimations;\n  const path = join(process.cwd(), folder);\n\n  return animations.map(animation => join(path, animation));\n}\n","import { readFile } from 'fs';\n\nimport { AnimationData } from './symbols';\n\nexport function readFileWithAnimationData(path: string) {\n  return new Promise<AnimationData>((resolve, reject) => {\n    readFile(path, (error, data) => {\n      if (error) {\n        return reject(error);\n      }\n\n      resolve(data.toString());\n    });\n  });\n}\n","import { NgModule, ModuleWithProviders, InjectionToken, APP_INITIALIZER } from '@angular/core';\nimport { TransferState } from '@angular/platform-browser';\n\nimport { LottieServerOptions } from './symbols';\nimport { appInitializerFactory } from './internals';\n\nexport const LOTTIE_SERVER_OPTIONS = new InjectionToken<LottieServerOptions>('LottieServerOptions');\n\n@NgModule()\nexport class LottieServerModule {\n  static forRoot(options: LottieServerOptions): ModuleWithProviders<LottieServerModule> {\n    return {\n      ngModule: LottieServerModule,\n      providers: [\n        {\n          provide: LOTTIE_SERVER_OPTIONS,\n          useValue: options\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: appInitializerFactory,\n          multi: true,\n          deps: [LOTTIE_SERVER_OPTIONS, TransferState]\n        }\n      ]\n    };\n  }\n}\n"]}