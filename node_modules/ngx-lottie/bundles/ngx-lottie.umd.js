(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('rxjs/operators'), require('@angular/platform-browser')) :
    typeof define === 'function' && define.amd ? define('ngx-lottie', ['exports', '@angular/core', '@angular/common', 'rxjs', 'rxjs/operators', '@angular/platform-browser'], factory) :
    (global = global || self, factory(global['ngx-lottie'] = {}, global.ng.core, global.ng.common, global.rxjs, global.rxjs.operators, global.ng.platformBrowser));
}(this, (function (exports, core, common, rxjs, operators, platformBrowser) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: src/utils.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} animation
     * @return {?}
     */
    function transformAnimationFilenameToKey(animation) {
        return "animation-" + animation.split('.json')[0];
    }
    /**
     * @param {?} player
     * @param {?} href
     * @param {?} isSafari
     * @return {?}
     */
    function setPlayerLocationHref(player, href, isSafari) {
        // This is a fix for the mask on Safari/iOS
        // https://github.com/airbnb/lottie-web/issues/1198
        if (isSafari) {
            ((/** @type {?} */ (((/** @type {?} */ (player)))))).setLocationHref(href);
        }
    }
    /**
     * @param {?} options
     * @param {?} container
     * @param {?} animationCache
     * @return {?}
     */
    function mergeOptionsWithDefault(options, container, animationCache) {
        /** @type {?} */
        var merged = Object.assign({
            container: container,
            renderer: 'svg',
            loop: true,
            autoplay: true
        }, options);
        if (animationCache !== null) {
            return animationCache.transformOptions(merged);
        }
        return merged;
    }
    /**
     * @return {?}
     */
    function isSafariFactory() {
        // This `try-catch` block will also handle server-side rendering
        // as `navigator` is not accessable there
        try {
            var vendor = navigator.vendor, userAgent = navigator.userAgent;
            return (vendor.indexOf('Apple') > -1 &&
                userAgent.indexOf('CriOS') === -1 &&
                userAgent.indexOf('FxiOS') === -1);
        }
        catch (_a) {
            return false;
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    function isAnimationConfigWithData(options) {
        /** @type {?} */
        var animationData = ((/** @type {?} */ (options))).animationData;
        return animationData !== null && typeof animationData === 'object';
    }
    /**
     * @param {?} animationCache
     * @param {?} options
     * @param {?} animationItem
     * @return {?}
     */
    function awaitConfigAndCache(animationCache, options, animationItem) {
        if (animationCache === null) {
            return;
        }
        animationItem.addEventListener('config_ready', (/**
         * @return {?}
         */
        function () {
            animationCache.set(options, animationItem);
        }));
    }
    /**
     * @param {?} player
     * @return {?}
     */
    function streamifyPlayerOrLoader(player) {
        /** @type {?} */
        var playerOrLoader = player();
        if (playerOrLoader instanceof Promise) {
            return rxjs.from(playerOrLoader).pipe(operators.map((/**
             * @param {?} module
             * @return {?}
             */
            function (module) { return module.default || module; })), operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                console.error("\n          Could not retrieve the \"lottie-web\" player, did you provide\n          the \"player\" property correctly?\n          export function playerFactory() {\n            return import('lottie-web');\n          }\n          LottieModule.forRoot({ player: playerFactory })\n        ");
                return rxjs.throwError(error);
            })), operators.shareReplay(1));
        }
        return rxjs.of(playerOrLoader);
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: src/symbols.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function BMEnterFrameEvent() { }
    if (false) {
        /** @type {?} */
        BMEnterFrameEvent.prototype.currentTime;
        /** @type {?} */
        BMEnterFrameEvent.prototype.duration;
        /** @type {?} */
        BMEnterFrameEvent.prototype.totalTime;
        /** @type {?} */
        BMEnterFrameEvent.prototype.type;
    }
    /**
     * @record
     */
    function BMCompleteLoopEvent() { }
    if (false) {
        /** @type {?} */
        BMCompleteLoopEvent.prototype.type;
        /** @type {?} */
        BMCompleteLoopEvent.prototype.loop;
        /** @type {?} */
        BMCompleteLoopEvent.prototype.playCount;
        /** @type {?} */
        BMCompleteLoopEvent.prototype.frameMult;
    }
    /**
     * @record
     */
    function BMCompleteEvent() { }
    if (false) {
        /** @type {?} */
        BMCompleteEvent.prototype.type;
        /** @type {?} */
        BMCompleteEvent.prototype.duration;
    }
    /**
     * @record
     */
    function BMSegmentStartEvent() { }
    if (false) {
        /** @type {?} */
        BMSegmentStartEvent.prototype.type;
        /** @type {?} */
        BMSegmentStartEvent.prototype.firstFrame;
        /** @type {?} */
        BMSegmentStartEvent.prototype.totalFrames;
    }
    /**
     * @record
     */
    function BMDestroyEvent() { }
    if (false) {
        /** @type {?} */
        BMDestroyEvent.prototype.target;
        /** @type {?} */
        BMDestroyEvent.prototype.type;
    }
    /**
     * @record
     */
    function BMRenderFrameErrorEvent() { }
    if (false) {
        /** @type {?} */
        BMRenderFrameErrorEvent.prototype.type;
        /** @type {?} */
        BMRenderFrameErrorEvent.prototype.nativeError;
        /** @type {?} */
        BMRenderFrameErrorEvent.prototype.currentTime;
    }
    /**
     * @record
     */
    function BMConfigErrorEvent() { }
    if (false) {
        /** @type {?} */
        BMConfigErrorEvent.prototype.type;
        /** @type {?} */
        BMConfigErrorEvent.prototype.nativeError;
    }
    /**
     * @record
     */
    function LottieOptions() { }
    if (false) {
        /** @type {?} */
        LottieOptions.prototype.player;
        /** @type {?|undefined} */
        LottieOptions.prototype.useCache;
    }
    /** @type {?} */
    var IS_SAFARI = new core.InjectionToken('IsSafari');
    /** @type {?} */
    var LOTTIE_OPTIONS = new core.InjectionToken('LottieOptions');
    /** @type {?} */
    var ANIMATION_CACHE = new core.InjectionToken('AnimationCache');

    /**
     * @fileoverview added by tsickle
     * Generated from: src/animation-loader.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // This has to be dynamic as `Document` interface is not
    // accepted by the ngc compiler
    // @dynamic
    var AnimationLoader = /** @class */ (function () {
        function AnimationLoader(ngZone, platformId, document, isSafari, options, animationCache) {
            this.ngZone = ngZone;
            this.platformId = platformId;
            this.document = document;
            this.isSafari = isSafari;
            this.options = options;
            this.animationCache = animationCache;
            this.player$ = streamifyPlayerOrLoader(this.options.player);
        }
        /**
         * @param {?} options
         * @param {?} container
         * @param {?} eventsFacade
         * @param {?} animationCreated
         * @param {?} instance
         * @param {?} destroy$
         * @return {?}
         */
        AnimationLoader.prototype.resolveLoaderAndLoadAnimation = /**
         * @param {?} options
         * @param {?} container
         * @param {?} eventsFacade
         * @param {?} animationCreated
         * @param {?} instance
         * @param {?} destroy$
         * @return {?}
         */
        function (options, container, eventsFacade, animationCreated, instance, destroy$) {
            var _this = this;
            if (common.isPlatformServer(this.platformId)) {
                return;
            }
            this.player$.pipe(operators.takeUntil(destroy$)).subscribe((/**
             * @param {?} player
             * @return {?}
             */
            function (player) {
                /** @type {?} */
                var mergedOptions = mergeOptionsWithDefault(options, container, _this.animationCache);
                _this.loadAnimation(player, mergedOptions, eventsFacade, animationCreated, instance);
            }));
        };
        /**
         * @private
         * @param {?} player
         * @param {?} options
         * @param {?} eventsFacade
         * @param {?} animationCreated
         * @param {?} instance
         * @return {?}
         */
        AnimationLoader.prototype.loadAnimation = /**
         * @private
         * @param {?} player
         * @param {?} options
         * @param {?} eventsFacade
         * @param {?} animationCreated
         * @param {?} instance
         * @return {?}
         */
        function (player, options, eventsFacade, animationCreated, instance) {
            setPlayerLocationHref(player, this.document.location.href, this.isSafari);
            /** @type {?} */
            var animationItem = this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () { return player.loadAnimation(options); }));
            awaitConfigAndCache(this.animationCache, options, animationItem);
            // Dispatch `animationCreated` event after animation is loaded successfully
            animationCreated.emit(animationItem);
            eventsFacade.addEventListeners(instance, animationItem);
        };
        AnimationLoader.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AnimationLoader.ctorParameters = function () { return [
            { type: core.NgZone },
            { type: String, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] },
            { type: Document, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },
            { type: Boolean, decorators: [{ type: core.Inject, args: [IS_SAFARI,] }] },
            { type: undefined, decorators: [{ type: core.Inject, args: [LOTTIE_OPTIONS,] }] },
            { type: undefined, decorators: [{ type: core.Inject, args: [ANIMATION_CACHE,] }] }
        ]; };
        return AnimationLoader;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AnimationLoader.prototype.player$;
        /**
         * @type {?}
         * @private
         */
        AnimationLoader.prototype.ngZone;
        /**
         * @type {?}
         * @private
         */
        AnimationLoader.prototype.platformId;
        /**
         * @type {?}
         * @private
         */
        AnimationLoader.prototype.document;
        /**
         * @type {?}
         * @private
         */
        AnimationLoader.prototype.isSafari;
        /**
         * @type {?}
         * @private
         */
        AnimationLoader.prototype.options;
        /**
         * @type {?}
         * @private
         */
        AnimationLoader.prototype.animationCache;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: src/base.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BaseDirective = /** @class */ (function () {
        function BaseDirective(platformId, animationLoader) {
            this.platformId = platformId;
            this.animationLoader = animationLoader;
            this.options = null;
            this.containerClass = null;
            this.styles = null;
            this.width = null;
            this.height = null;
            /**
             * `animationCreated` is dispatched after calling `loadAnimation`
             */
            this.animationCreated = new core.EventEmitter();
            /**
             * `complete` is dispatched after completing the last frame
             */
            this.complete = new core.EventEmitter();
            /**
             * `loopComplete` is dispatched after completing frame loop
             */
            this.loopComplete = new core.EventEmitter();
            /**
             * `enterFrame` is dispatched after entering the new frame
             */
            this.enterFrame = new core.EventEmitter();
            /**
             * `segmentStart` is dispatched when the new segment is adjusted
             */
            this.segmentStart = new core.EventEmitter();
            /**
             * Original event name is `config_ready`. `config_ready` is dispatched
             * after the needed renderer is configured
             */
            this.configReady = new core.EventEmitter();
            /**
             * Original event name is `data_ready`. `data_ready` is dispatched
             * when all parts of the animation have been loaded
             */
            this.dataReady = new core.EventEmitter();
            /**
             * Original event name is `DOMLoaded`. `DOMLoaded` is dispatched
             * when elements have been added to the DOM
             */
            this.domLoaded = new core.EventEmitter();
            /**
             * `destroy` will be dispatched in the `ngOnDestroy` hook of the service,
             * it's useful for releasing resources
             */
            this.destroy = new core.EventEmitter();
            /**
             * `error` will be dispatched if the lottie player could not render
             * some frame or parse config
             */
            this.error = new core.EventEmitter();
            this.destroy$ = new rxjs.Subject();
        }
        /**
         * @return {?}
         */
        BaseDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        /**
         * @protected
         * @return {?}
         */
        BaseDirective.prototype.setWidthAndHeight = /**
         * @protected
         * @return {?}
         */
        function () {
            this.width = this.width || '100%';
            this.height = this.height || '100%';
        };
        /**
         * @protected
         * @param {?} container
         * @param {?} eventsFacade
         * @param {?} instance
         * @return {?}
         */
        BaseDirective.prototype.loadAnimation = /**
         * @protected
         * @param {?} container
         * @param {?} eventsFacade
         * @param {?} instance
         * @return {?}
         */
        function (container, eventsFacade, instance) {
            if (common.isPlatformServer(this.platformId)) {
                return;
            }
            this.animationLoader.resolveLoaderAndLoadAnimation(this.options, container, eventsFacade, this.animationCreated, instance, this.destroy$);
        };
        BaseDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[lottie]' },] }
        ];
        /** @nocollapse */
        BaseDirective.ctorParameters = function () { return [
            { type: String, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] },
            { type: AnimationLoader }
        ]; };
        BaseDirective.propDecorators = {
            options: [{ type: core.Input }],
            containerClass: [{ type: core.Input }],
            styles: [{ type: core.Input }],
            width: [{ type: core.Input }],
            height: [{ type: core.Input }],
            animationCreated: [{ type: core.Output }],
            complete: [{ type: core.Output }],
            loopComplete: [{ type: core.Output }],
            enterFrame: [{ type: core.Output }],
            segmentStart: [{ type: core.Output }],
            configReady: [{ type: core.Output }],
            dataReady: [{ type: core.Output }],
            domLoaded: [{ type: core.Output }],
            destroy: [{ type: core.Output }],
            error: [{ type: core.Output }]
        };
        return BaseDirective;
    }());
    if (false) {
        /** @type {?} */
        BaseDirective.prototype.options;
        /** @type {?} */
        BaseDirective.prototype.containerClass;
        /** @type {?} */
        BaseDirective.prototype.styles;
        /** @type {?} */
        BaseDirective.prototype.width;
        /** @type {?} */
        BaseDirective.prototype.height;
        /**
         * `animationCreated` is dispatched after calling `loadAnimation`
         * @type {?}
         */
        BaseDirective.prototype.animationCreated;
        /**
         * `complete` is dispatched after completing the last frame
         * @type {?}
         */
        BaseDirective.prototype.complete;
        /**
         * `loopComplete` is dispatched after completing frame loop
         * @type {?}
         */
        BaseDirective.prototype.loopComplete;
        /**
         * `enterFrame` is dispatched after entering the new frame
         * @type {?}
         */
        BaseDirective.prototype.enterFrame;
        /**
         * `segmentStart` is dispatched when the new segment is adjusted
         * @type {?}
         */
        BaseDirective.prototype.segmentStart;
        /**
         * Original event name is `config_ready`. `config_ready` is dispatched
         * after the needed renderer is configured
         * @type {?}
         */
        BaseDirective.prototype.configReady;
        /**
         * Original event name is `data_ready`. `data_ready` is dispatched
         * when all parts of the animation have been loaded
         * @type {?}
         */
        BaseDirective.prototype.dataReady;
        /**
         * Original event name is `DOMLoaded`. `DOMLoaded` is dispatched
         * when elements have been added to the DOM
         * @type {?}
         */
        BaseDirective.prototype.domLoaded;
        /**
         * `destroy` will be dispatched in the `ngOnDestroy` hook of the service,
         * it's useful for releasing resources
         * @type {?}
         */
        BaseDirective.prototype.destroy;
        /**
         * `error` will be dispatched if the lottie player could not render
         * some frame or parse config
         * @type {?}
         */
        BaseDirective.prototype.error;
        /**
         * @type {?}
         * @private
         */
        BaseDirective.prototype.destroy$;
        /**
         * @type {?}
         * @private
         */
        BaseDirective.prototype.platformId;
        /**
         * @type {?}
         * @private
         */
        BaseDirective.prototype.animationLoader;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: src/animation-cache.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AnimationCache = /** @class */ (function () {
        function AnimationCache() {
            this.cache = new Map();
        }
        /**
         * @param {?} options
         * @return {?}
         */
        AnimationCache.create = /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            if (options.useCache) {
                return new AnimationCache();
            }
            return null;
        };
        /**
         * @param {?} options
         * @return {?}
         */
        AnimationCache.prototype.transformOptions = /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            /** @type {?} */
            var path = ((/** @type {?} */ (options))).path;
            if (path && this.cache.has(path)) {
                delete ((/** @type {?} */ (options))).path;
                ((/** @type {?} */ (options))).animationData = this.cache.get(path);
            }
            return options;
        };
        /**
         * @param {?} options
         * @param {?} animationItem
         * @return {?}
         */
        AnimationCache.prototype.set = /**
         * @param {?} options
         * @param {?} animationItem
         * @return {?}
         */
        function (options, animationItem) {
            if (isAnimationConfigWithData(options)) {
                return;
            }
            /** @type {?} */
            var animationData = animationItem['animationData'];
            this.cache.set((/** @type {?} */ (options.path)), animationData);
        };
        return AnimationCache;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AnimationCache.prototype.cache;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: src/events-facade.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Returns only those `EventEmitter` instances that has attached observers
     * @param {?} instance
     * @param {?} eventsMap
     * @return {?}
     */
    function getObservedEventEmitters(instance, eventsMap) {
        return Object.keys(instance)
            .map((/**
         * @param {?} key
         * @return {?}
         */
        function (key) { return [key, instance[key]]; }))
            .filter((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = __read(_a, 2), key = _b[0], property = _b[1];
            return property instanceof core.EventEmitter &&
                property.observers.length > 0 &&
                eventsMap.hasOwnProperty(key);
        }))
            .map((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = __read(_a, 2), key = _b[0], eventEmitter = _b[1];
            return ({
                eventEmitter: eventEmitter,
                name: eventsMap[key]
            });
        }));
    }
    var LottieEventsFacade = /** @class */ (function () {
        function LottieEventsFacade(ngZone, platformId) {
            this.ngZone = ngZone;
            this.platformId = platformId;
            /**
             * @see https://github.com/airbnb/lottie-web#events
             */
            this.eventsMap = {
                complete: 'complete',
                loopComplete: 'loopComplete',
                enterFrame: 'enterFrame',
                segmentStart: 'segmentStart',
                configReady: 'config_ready',
                dataReady: 'data_ready',
                domLoaded: 'DOMLoaded',
                destroy: 'destroy',
                error: 'error'
            };
            this.animationItem = null;
        }
        /**
         * @return {?}
         */
        LottieEventsFacade.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.dispose();
        };
        /**
         * @param {?} instance
         * @param {?} animationItem
         * @return {?}
         */
        LottieEventsFacade.prototype.addEventListeners = /**
         * @param {?} instance
         * @param {?} animationItem
         * @return {?}
         */
        function (instance, animationItem) {
            var _this = this;
            this.animationItem = animationItem;
            // `AnimationItem` triggers different events every ms, we have to listen
            // them outside Angular's context, thus it won't affect performance
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () { return _this.addEventListenersToObservedEventEmitters(instance); }));
        };
        /**
         * @private
         * @return {?}
         */
        LottieEventsFacade.prototype.dispose = /**
         * @private
         * @return {?}
         */
        function () {
            // The `ng-lottie` component or the `lottie` directive can be destroyed
            // before the `animationItem` is set, thus it will fail with
            // `Cannot read property 'destroy' of null`.
            // Potentially it can happen if the directive gets destroyed before change
            // detection is run.
            if (common.isPlatformServer(this.platformId) || this.animationItem === null) {
                return;
            }
            // `destroy()` will remove all events listeners
            this.animationItem.destroy();
            this.animationItem = null;
        };
        /**
         * @private
         * @param {?} instance
         * @return {?}
         */
        LottieEventsFacade.prototype.addEventListenersToObservedEventEmitters = /**
         * @private
         * @param {?} instance
         * @return {?}
         */
        function (instance) {
            var e_1, _a;
            /** @type {?} */
            var observedEmitters = getObservedEventEmitters(instance, this.eventsMap);
            var _loop_1 = function (name_1, eventEmitter) {
                (/** @type {?} */ (this_1.animationItem)).addEventListener(name_1, (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    eventEmitter.emit(event);
                }));
            };
            var this_1 = this;
            try {
                for (var observedEmitters_1 = __values(observedEmitters), observedEmitters_1_1 = observedEmitters_1.next(); !observedEmitters_1_1.done; observedEmitters_1_1 = observedEmitters_1.next()) {
                    var _b = observedEmitters_1_1.value, name_1 = _b.name, eventEmitter = _b.eventEmitter;
                    _loop_1(name_1, eventEmitter);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (observedEmitters_1_1 && !observedEmitters_1_1.done && (_a = observedEmitters_1.return)) _a.call(observedEmitters_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        LottieEventsFacade.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        LottieEventsFacade.ctorParameters = function () { return [
            { type: core.NgZone },
            { type: String, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
        ]; };
        return LottieEventsFacade;
    }());
    if (false) {
        /**
         * @see https://github.com/airbnb/lottie-web#events
         * @type {?}
         * @private
         */
        LottieEventsFacade.prototype.eventsMap;
        /**
         * @type {?}
         * @private
         */
        LottieEventsFacade.prototype.animationItem;
        /**
         * @type {?}
         * @private
         */
        LottieEventsFacade.prototype.ngZone;
        /**
         * @type {?}
         * @private
         */
        LottieEventsFacade.prototype.platformId;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: src/lottie.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LottieDirective = /** @class */ (function (_super) {
        __extends(LottieDirective, _super);
        function LottieDirective(platformId, host, eventsFacade, animationLoader) {
            var _this = _super.call(this, platformId, animationLoader) || this;
            _this.host = host;
            _this.eventsFacade = eventsFacade;
            return _this;
        }
        /**
         * @return {?}
         */
        LottieDirective.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            _super.prototype.loadAnimation.call(this, this.host.nativeElement, this.eventsFacade, this);
        };
        LottieDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[lottie]',
                        providers: [LottieEventsFacade]
                    },] }
        ];
        /** @nocollapse */
        LottieDirective.ctorParameters = function () { return [
            { type: String, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] },
            { type: core.ElementRef, decorators: [{ type: core.Self }] },
            { type: LottieEventsFacade, decorators: [{ type: core.Self }] },
            { type: AnimationLoader }
        ]; };
        return LottieDirective;
    }(BaseDirective));
    if (false) {
        /**
         * @type {?}
         * @private
         */
        LottieDirective.prototype.host;
        /**
         * @type {?}
         * @private
         */
        LottieDirective.prototype.eventsFacade;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: src/lottie.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LottieComponent = /** @class */ (function (_super) {
        __extends(LottieComponent, _super);
        function LottieComponent(renderer, platformId, eventsFacade, animationLoader) {
            var _this = _super.call(this, platformId, animationLoader) || this;
            _this.renderer = renderer;
            _this.eventsFacade = eventsFacade;
            _this.container = (/** @type {?} */ (null));
            return _this;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        LottieComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            /** @type {?} */
            var containerClass = changes.containerClass;
            if (containerClass === undefined || typeof containerClass.currentValue !== 'string') {
                return;
            }
            this.renderer.addClass(this.container.nativeElement, containerClass.currentValue);
        };
        /**
         * @return {?}
         */
        LottieComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            _super.prototype.setWidthAndHeight.call(this);
            _super.prototype.loadAnimation.call(this, this.container.nativeElement, this.eventsFacade, this);
        };
        LottieComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ng-lottie',
                        template: "\n    <div #container [style.width]=\"width\" [style.height]=\"height\" [ngStyle]=\"styles\"></div>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        providers: [LottieEventsFacade]
                    }] }
        ];
        /** @nocollapse */
        LottieComponent.ctorParameters = function () { return [
            { type: core.Renderer2 },
            { type: String, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] },
            { type: LottieEventsFacade, decorators: [{ type: core.Self }] },
            { type: AnimationLoader }
        ]; };
        LottieComponent.propDecorators = {
            container: [{ type: core.ViewChild, args: ['container', { static: true },] }]
        };
        return LottieComponent;
    }(BaseDirective));
    if (false) {
        /** @type {?} */
        LottieComponent.prototype.container;
        /**
         * @type {?}
         * @private
         */
        LottieComponent.prototype.renderer;
        /**
         * @type {?}
         * @private
         */
        LottieComponent.prototype.eventsFacade;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: src/lottie.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LottieModule = /** @class */ (function () {
        function LottieModule() {
        }
        /**
         * @param {?} options
         * @return {?}
         */
        LottieModule.forRoot = /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            return {
                ngModule: LottieModule,
                providers: [
                    AnimationLoader,
                    {
                        provide: LOTTIE_OPTIONS,
                        useValue: options
                    },
                    {
                        provide: IS_SAFARI,
                        useFactory: isSafariFactory
                    },
                    {
                        provide: ANIMATION_CACHE,
                        useFactory: AnimationCache.create,
                        deps: [LOTTIE_OPTIONS]
                    }
                ]
            };
        };
        LottieModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        declarations: [BaseDirective, LottieDirective, LottieComponent],
                        exports: [BaseDirective, LottieDirective, LottieComponent]
                    },] }
        ];
        return LottieModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: src/transfer-state.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LottieTransferState = /** @class */ (function () {
        function LottieTransferState(transferState) {
            this.transferState = transferState;
        }
        /**
         * @template T
         * @param {?} animation
         * @return {?}
         */
        LottieTransferState.prototype.get = /**
         * @template T
         * @param {?} animation
         * @return {?}
         */
        function (animation) {
            /** @type {?} */
            var animationKey = transformAnimationFilenameToKey(animation);
            /** @type {?} */
            var stateKey = platformBrowser.makeStateKey(animationKey);
            return this.transferState.get(stateKey, null);
        };
        LottieTransferState.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        LottieTransferState.ctorParameters = function () { return [
            { type: platformBrowser.TransferState }
        ]; };
        /** @nocollapse */ LottieTransferState.ɵprov = core.ɵɵdefineInjectable({ factory: function LottieTransferState_Factory() { return new LottieTransferState(core.ɵɵinject(platformBrowser.TransferState)); }, token: LottieTransferState, providedIn: "root" });
        return LottieTransferState;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        LottieTransferState.prototype.transferState;
    }

    exports.BaseDirective = BaseDirective;
    exports.LottieComponent = LottieComponent;
    exports.LottieDirective = LottieDirective;
    exports.LottieModule = LottieModule;
    exports.LottieTransferState = LottieTransferState;
    exports.transformAnimationFilenameToKey = transformAnimationFilenameToKey;
    exports.ɵb = IS_SAFARI;
    exports.ɵc = LOTTIE_OPTIONS;
    exports.ɵd = ANIMATION_CACHE;
    exports.ɵe = isSafariFactory;
    exports.ɵf = AnimationLoader;
    exports.ɵg = AnimationCache;
    exports.ɵh = LottieEventsFacade;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-lottie.umd.js.map
