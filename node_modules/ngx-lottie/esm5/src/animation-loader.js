/**
 * @fileoverview added by tsickle
 * Generated from: src/animation-loader.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformServer, DOCUMENT } from '@angular/common';
import { takeUntil } from 'rxjs/operators';
import { IS_SAFARI, LOTTIE_OPTIONS, ANIMATION_CACHE } from './symbols';
import { awaitConfigAndCache, setPlayerLocationHref, mergeOptionsWithDefault, streamifyPlayerOrLoader } from './utils';
// This has to be dynamic as `Document` interface is not
// accepted by the ngc compiler
// @dynamic
var AnimationLoader = /** @class */ (function () {
    function AnimationLoader(ngZone, platformId, document, isSafari, options, animationCache) {
        this.ngZone = ngZone;
        this.platformId = platformId;
        this.document = document;
        this.isSafari = isSafari;
        this.options = options;
        this.animationCache = animationCache;
        this.player$ = streamifyPlayerOrLoader(this.options.player);
    }
    /**
     * @param {?} options
     * @param {?} container
     * @param {?} eventsFacade
     * @param {?} animationCreated
     * @param {?} instance
     * @param {?} destroy$
     * @return {?}
     */
    AnimationLoader.prototype.resolveLoaderAndLoadAnimation = /**
     * @param {?} options
     * @param {?} container
     * @param {?} eventsFacade
     * @param {?} animationCreated
     * @param {?} instance
     * @param {?} destroy$
     * @return {?}
     */
    function (options, container, eventsFacade, animationCreated, instance, destroy$) {
        var _this = this;
        if (isPlatformServer(this.platformId)) {
            return;
        }
        this.player$.pipe(takeUntil(destroy$)).subscribe((/**
         * @param {?} player
         * @return {?}
         */
        function (player) {
            /** @type {?} */
            var mergedOptions = mergeOptionsWithDefault(options, container, _this.animationCache);
            _this.loadAnimation(player, mergedOptions, eventsFacade, animationCreated, instance);
        }));
    };
    /**
     * @private
     * @param {?} player
     * @param {?} options
     * @param {?} eventsFacade
     * @param {?} animationCreated
     * @param {?} instance
     * @return {?}
     */
    AnimationLoader.prototype.loadAnimation = /**
     * @private
     * @param {?} player
     * @param {?} options
     * @param {?} eventsFacade
     * @param {?} animationCreated
     * @param {?} instance
     * @return {?}
     */
    function (player, options, eventsFacade, animationCreated, instance) {
        setPlayerLocationHref(player, this.document.location.href, this.isSafari);
        /** @type {?} */
        var animationItem = this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () { return player.loadAnimation(options); }));
        awaitConfigAndCache(this.animationCache, options, animationItem);
        // Dispatch `animationCreated` event after animation is loaded successfully
        animationCreated.emit(animationItem);
        eventsFacade.addEventListeners(instance, animationItem);
    };
    AnimationLoader.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AnimationLoader.ctorParameters = function () { return [
        { type: NgZone },
        { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Boolean, decorators: [{ type: Inject, args: [IS_SAFARI,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [LOTTIE_OPTIONS,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [ANIMATION_CACHE,] }] }
    ]; };
    return AnimationLoader;
}());
export { AnimationLoader };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.player$;
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.platformId;
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.document;
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.isSafari;
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.options;
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.animationCache;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9uLWxvYWRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1sb3R0aWUvIiwic291cmNlcyI6WyJzcmMvYW5pbWF0aW9uLWxvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBZ0IsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUc3RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0MsT0FBTyxFQU9MLFNBQVMsRUFDVCxjQUFjLEVBQ2QsZUFBZSxFQUNoQixNQUFNLFdBQVcsQ0FBQztBQUNuQixPQUFPLEVBQ0wsbUJBQW1CLEVBQ25CLHFCQUFxQixFQUNyQix1QkFBdUIsRUFDdkIsdUJBQXVCLEVBQ3hCLE1BQU0sU0FBUyxDQUFDOzs7O0FBUWpCO0lBSUUseUJBQ1UsTUFBYyxFQUNPLFVBQWtCLEVBQ3JCLFFBQWtCLEVBQ2pCLFFBQWlCLEVBQ1osT0FBc0IsRUFDckIsY0FBcUM7UUFMOUQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNPLGVBQVUsR0FBVixVQUFVLENBQVE7UUFDckIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNqQixhQUFRLEdBQVIsUUFBUSxDQUFTO1FBQ1osWUFBTyxHQUFQLE9BQU8sQ0FBZTtRQUNyQixtQkFBYyxHQUFkLGNBQWMsQ0FBdUI7UUFSaEUsWUFBTyxHQUFHLHVCQUF1QixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFTNUQsQ0FBQzs7Ozs7Ozs7OztJQUVKLHVEQUE2Qjs7Ozs7Ozs7O0lBQTdCLFVBQ0UsT0FBZ0MsRUFDaEMsU0FBc0IsRUFDdEIsWUFBZ0MsRUFDaEMsZ0JBQTZDLEVBQzdDLFFBQXVCLEVBQ3ZCLFFBQXVCO1FBTnpCLGlCQWdCQztRQVJDLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ3JDLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVM7Ozs7UUFBQyxVQUFBLE1BQU07O2dCQUMvQyxhQUFhLEdBQUcsdUJBQXVCLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFJLENBQUMsY0FBYyxDQUFDO1lBQ3RGLEtBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDdEYsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7Ozs7Ozs7O0lBRU8sdUNBQWE7Ozs7Ozs7OztJQUFyQixVQUNFLE1BQW9CLEVBQ3BCLE9BQTBELEVBQzFELFlBQWdDLEVBQ2hDLGdCQUE2QyxFQUM3QyxRQUF1QjtRQUV2QixxQkFBcUIsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzs7WUFDcEUsYUFBYSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCOzs7UUFBQyxjQUFNLE9BQUEsTUFBTSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsRUFBN0IsQ0FBNkIsRUFBQztRQUN4RixtQkFBbUIsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNqRSwyRUFBMkU7UUFDM0UsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3JDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDMUQsQ0FBQzs7Z0JBNUNGLFVBQVU7Ozs7Z0JBOUJVLE1BQU07NkNBb0N0QixNQUFNLFNBQUMsV0FBVztnQkFDaUIsUUFBUSx1QkFBM0MsTUFBTSxTQUFDLFFBQVE7OENBQ2YsTUFBTSxTQUFDLFNBQVM7Z0RBQ2hCLE1BQU0sU0FBQyxjQUFjO2dEQUNyQixNQUFNLFNBQUMsZUFBZTs7SUFtQzNCLHNCQUFDO0NBQUEsQUE3Q0QsSUE2Q0M7U0E1Q1ksZUFBZTs7Ozs7O0lBQzFCLGtDQUErRDs7Ozs7SUFHN0QsaUNBQXNCOzs7OztJQUN0QixxQ0FBK0M7Ozs7O0lBQy9DLG1DQUE0Qzs7Ozs7SUFDNUMsbUNBQTRDOzs7OztJQUM1QyxrQ0FBc0Q7Ozs7O0lBQ3RELHlDQUFzRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE5nWm9uZSwgSW5qZWN0LCBFdmVudEVtaXR0ZXIsIFBMQVRGT1JNX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtU2VydmVyLCBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtcbiAgTG90dGllUGxheWVyLFxuICBMb3R0aWVPcHRpb25zLFxuICBBbmltYXRpb25JdGVtLFxuICBBbmltYXRpb25PcHRpb25zLFxuICBBbmltYXRpb25Db25maWdXaXRoRGF0YSxcbiAgQW5pbWF0aW9uQ29uZmlnV2l0aFBhdGgsXG4gIElTX1NBRkFSSSxcbiAgTE9UVElFX09QVElPTlMsXG4gIEFOSU1BVElPTl9DQUNIRVxufSBmcm9tICcuL3N5bWJvbHMnO1xuaW1wb3J0IHtcbiAgYXdhaXRDb25maWdBbmRDYWNoZSxcbiAgc2V0UGxheWVyTG9jYXRpb25IcmVmLFxuICBtZXJnZU9wdGlvbnNXaXRoRGVmYXVsdCxcbiAgc3RyZWFtaWZ5UGxheWVyT3JMb2FkZXJcbn0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBCYXNlRGlyZWN0aXZlIH0gZnJvbSAnLi9iYXNlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBBbmltYXRpb25DYWNoZSB9IGZyb20gJy4vYW5pbWF0aW9uLWNhY2hlJztcbmltcG9ydCB7IExvdHRpZUV2ZW50c0ZhY2FkZSB9IGZyb20gJy4vZXZlbnRzLWZhY2FkZSc7XG5cbi8vIFRoaXMgaGFzIHRvIGJlIGR5bmFtaWMgYXMgYERvY3VtZW50YCBpbnRlcmZhY2UgaXMgbm90XG4vLyBhY2NlcHRlZCBieSB0aGUgbmdjIGNvbXBpbGVyXG4vLyBAZHluYW1pY1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFuaW1hdGlvbkxvYWRlciB7XG4gIHByaXZhdGUgcGxheWVyJCA9IHN0cmVhbWlmeVBsYXllck9yTG9hZGVyKHRoaXMub3B0aW9ucy5wbGF5ZXIpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgbmdab25lOiBOZ1pvbmUsXG4gICAgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybUlkOiBzdHJpbmcsXG4gICAgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudDogRG9jdW1lbnQsXG4gICAgQEluamVjdChJU19TQUZBUkkpIHByaXZhdGUgaXNTYWZhcmk6IGJvb2xlYW4sXG4gICAgQEluamVjdChMT1RUSUVfT1BUSU9OUykgcHJpdmF0ZSBvcHRpb25zOiBMb3R0aWVPcHRpb25zLFxuICAgIEBJbmplY3QoQU5JTUFUSU9OX0NBQ0hFKSBwcml2YXRlIGFuaW1hdGlvbkNhY2hlOiBBbmltYXRpb25DYWNoZSB8IG51bGxcbiAgKSB7fVxuXG4gIHJlc29sdmVMb2FkZXJBbmRMb2FkQW5pbWF0aW9uKFxuICAgIG9wdGlvbnM6IEFuaW1hdGlvbk9wdGlvbnMgfCBudWxsLFxuICAgIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsXG4gICAgZXZlbnRzRmFjYWRlOiBMb3R0aWVFdmVudHNGYWNhZGUsXG4gICAgYW5pbWF0aW9uQ3JlYXRlZDogRXZlbnRFbWl0dGVyPEFuaW1hdGlvbkl0ZW0+LFxuICAgIGluc3RhbmNlOiBCYXNlRGlyZWN0aXZlLFxuICAgIGRlc3Ryb3kkOiBTdWJqZWN0PHZvaWQ+XG4gICkge1xuICAgIGlmIChpc1BsYXRmb3JtU2VydmVyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnBsYXllciQucGlwZSh0YWtlVW50aWwoZGVzdHJveSQpKS5zdWJzY3JpYmUocGxheWVyID0+IHtcbiAgICAgIGNvbnN0IG1lcmdlZE9wdGlvbnMgPSBtZXJnZU9wdGlvbnNXaXRoRGVmYXVsdChvcHRpb25zLCBjb250YWluZXIsIHRoaXMuYW5pbWF0aW9uQ2FjaGUpO1xuICAgICAgdGhpcy5sb2FkQW5pbWF0aW9uKHBsYXllciwgbWVyZ2VkT3B0aW9ucywgZXZlbnRzRmFjYWRlLCBhbmltYXRpb25DcmVhdGVkLCBpbnN0YW5jZSk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGxvYWRBbmltYXRpb24oXG4gICAgcGxheWVyOiBMb3R0aWVQbGF5ZXIsXG4gICAgb3B0aW9uczogQW5pbWF0aW9uQ29uZmlnV2l0aERhdGEgfCBBbmltYXRpb25Db25maWdXaXRoUGF0aCxcbiAgICBldmVudHNGYWNhZGU6IExvdHRpZUV2ZW50c0ZhY2FkZSxcbiAgICBhbmltYXRpb25DcmVhdGVkOiBFdmVudEVtaXR0ZXI8QW5pbWF0aW9uSXRlbT4sXG4gICAgaW5zdGFuY2U6IEJhc2VEaXJlY3RpdmVcbiAgKTogdm9pZCB7XG4gICAgc2V0UGxheWVyTG9jYXRpb25IcmVmKHBsYXllciwgdGhpcy5kb2N1bWVudC5sb2NhdGlvbi5ocmVmLCB0aGlzLmlzU2FmYXJpKTtcbiAgICBjb25zdCBhbmltYXRpb25JdGVtID0gdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gcGxheWVyLmxvYWRBbmltYXRpb24ob3B0aW9ucykpO1xuICAgIGF3YWl0Q29uZmlnQW5kQ2FjaGUodGhpcy5hbmltYXRpb25DYWNoZSwgb3B0aW9ucywgYW5pbWF0aW9uSXRlbSk7XG4gICAgLy8gRGlzcGF0Y2ggYGFuaW1hdGlvbkNyZWF0ZWRgIGV2ZW50IGFmdGVyIGFuaW1hdGlvbiBpcyBsb2FkZWQgc3VjY2Vzc2Z1bGx5XG4gICAgYW5pbWF0aW9uQ3JlYXRlZC5lbWl0KGFuaW1hdGlvbkl0ZW0pO1xuICAgIGV2ZW50c0ZhY2FkZS5hZGRFdmVudExpc3RlbmVycyhpbnN0YW5jZSwgYW5pbWF0aW9uSXRlbSk7XG4gIH1cbn1cbiJdfQ==