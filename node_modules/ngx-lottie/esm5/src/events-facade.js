/**
 * @fileoverview added by tsickle
 * Generated from: src/events-facade.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __read, __values } from "tslib";
import { Injectable, NgZone, Inject, EventEmitter, PLATFORM_ID } from '@angular/core';
import { isPlatformServer } from '@angular/common';
/**
 * Returns only those `EventEmitter` instances that has attached observers
 * @param {?} instance
 * @param {?} eventsMap
 * @return {?}
 */
function getObservedEventEmitters(instance, eventsMap) {
    return Object.keys(instance)
        .map((/**
     * @param {?} key
     * @return {?}
     */
    function (key) { return [key, instance[key]]; }))
        .filter((/**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var _b = __read(_a, 2), key = _b[0], property = _b[1];
        return property instanceof EventEmitter &&
            property.observers.length > 0 &&
            eventsMap.hasOwnProperty(key);
    }))
        .map((/**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var _b = __read(_a, 2), key = _b[0], eventEmitter = _b[1];
        return ({
            eventEmitter: eventEmitter,
            name: eventsMap[key]
        });
    }));
}
var LottieEventsFacade = /** @class */ (function () {
    function LottieEventsFacade(ngZone, platformId) {
        this.ngZone = ngZone;
        this.platformId = platformId;
        /**
         * @see https://github.com/airbnb/lottie-web#events
         */
        this.eventsMap = {
            complete: 'complete',
            loopComplete: 'loopComplete',
            enterFrame: 'enterFrame',
            segmentStart: 'segmentStart',
            configReady: 'config_ready',
            dataReady: 'data_ready',
            domLoaded: 'DOMLoaded',
            destroy: 'destroy',
            error: 'error'
        };
        this.animationItem = null;
    }
    /**
     * @return {?}
     */
    LottieEventsFacade.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.dispose();
    };
    /**
     * @param {?} instance
     * @param {?} animationItem
     * @return {?}
     */
    LottieEventsFacade.prototype.addEventListeners = /**
     * @param {?} instance
     * @param {?} animationItem
     * @return {?}
     */
    function (instance, animationItem) {
        var _this = this;
        this.animationItem = animationItem;
        // `AnimationItem` triggers different events every ms, we have to listen
        // them outside Angular's context, thus it won't affect performance
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () { return _this.addEventListenersToObservedEventEmitters(instance); }));
    };
    /**
     * @private
     * @return {?}
     */
    LottieEventsFacade.prototype.dispose = /**
     * @private
     * @return {?}
     */
    function () {
        // The `ng-lottie` component or the `lottie` directive can be destroyed
        // before the `animationItem` is set, thus it will fail with
        // `Cannot read property 'destroy' of null`.
        // Potentially it can happen if the directive gets destroyed before change
        // detection is run.
        if (isPlatformServer(this.platformId) || this.animationItem === null) {
            return;
        }
        // `destroy()` will remove all events listeners
        this.animationItem.destroy();
        this.animationItem = null;
    };
    /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    LottieEventsFacade.prototype.addEventListenersToObservedEventEmitters = /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    function (instance) {
        var e_1, _a;
        /** @type {?} */
        var observedEmitters = getObservedEventEmitters(instance, this.eventsMap);
        var _loop_1 = function (name_1, eventEmitter) {
            (/** @type {?} */ (this_1.animationItem)).addEventListener(name_1, (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                eventEmitter.emit(event);
            }));
        };
        var this_1 = this;
        try {
            for (var observedEmitters_1 = __values(observedEmitters), observedEmitters_1_1 = observedEmitters_1.next(); !observedEmitters_1_1.done; observedEmitters_1_1 = observedEmitters_1.next()) {
                var _b = observedEmitters_1_1.value, name_1 = _b.name, eventEmitter = _b.eventEmitter;
                _loop_1(name_1, eventEmitter);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (observedEmitters_1_1 && !observedEmitters_1_1.done && (_a = observedEmitters_1.return)) _a.call(observedEmitters_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    LottieEventsFacade.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LottieEventsFacade.ctorParameters = function () { return [
        { type: NgZone },
        { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    return LottieEventsFacade;
}());
export { LottieEventsFacade };
if (false) {
    /**
     * @see https://github.com/airbnb/lottie-web#events
     * @type {?}
     * @private
     */
    LottieEventsFacade.prototype.eventsMap;
    /**
     * @type {?}
     * @private
     */
    LottieEventsFacade.prototype.animationItem;
    /**
     * @type {?}
     * @private
     */
    LottieEventsFacade.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    LottieEventsFacade.prototype.platformId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzLWZhY2FkZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1sb3R0aWUvIiwic291cmNlcyI6WyJzcmMvZXZlbnRzLWZhY2FkZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQWEsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7Ozs7OztBQVFuRCxTQUFTLHdCQUF3QixDQUFDLFFBQXVCLEVBQUUsU0FBb0I7SUFDN0UsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztTQUN6QixHQUFHOzs7O0lBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBcEIsQ0FBb0IsRUFBQztTQUNoQyxNQUFNOzs7O0lBQ0wsVUFBQyxFQUFlO1lBQWYsa0JBQWUsRUFBZCxXQUFHLEVBQUUsZ0JBQVE7UUFDYixPQUFBLFFBQVEsWUFBWSxZQUFZO1lBQ2hDLFFBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUM7WUFDN0IsU0FBUyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUM7SUFGN0IsQ0FFNkIsRUFDaEM7U0FDQSxHQUFHOzs7O0lBQUMsVUFBQyxFQUFtQjtZQUFuQixrQkFBbUIsRUFBbEIsV0FBRyxFQUFFLG9CQUFZO1FBQU0sT0FBQSxDQUFDO1lBQzdCLFlBQVksY0FBQTtZQUNaLElBQUksRUFBRSxTQUFTLENBQUMsR0FBRyxDQUFDO1NBQ3JCLENBQUM7SUFINEIsQ0FHNUIsRUFBQyxDQUFDO0FBQ1IsQ0FBQztBQUVEO0lBbUJFLDRCQUFvQixNQUFjLEVBQStCLFVBQWtCO1FBQS9ELFdBQU0sR0FBTixNQUFNLENBQVE7UUFBK0IsZUFBVSxHQUFWLFVBQVUsQ0FBUTs7OztRQWQzRSxjQUFTLEdBQWM7WUFDN0IsUUFBUSxFQUFFLFVBQVU7WUFDcEIsWUFBWSxFQUFFLGNBQWM7WUFDNUIsVUFBVSxFQUFFLFlBQVk7WUFDeEIsWUFBWSxFQUFFLGNBQWM7WUFDNUIsV0FBVyxFQUFFLGNBQWM7WUFDM0IsU0FBUyxFQUFFLFlBQVk7WUFDdkIsU0FBUyxFQUFFLFdBQVc7WUFDdEIsT0FBTyxFQUFFLFNBQVM7WUFDbEIsS0FBSyxFQUFFLE9BQU87U0FDZixDQUFDO1FBRU0sa0JBQWEsR0FBeUIsSUFBSSxDQUFDO0lBRW1DLENBQUM7Ozs7SUFFdkYsd0NBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2pCLENBQUM7Ozs7OztJQUVELDhDQUFpQjs7Ozs7SUFBakIsVUFBa0IsUUFBdUIsRUFBRSxhQUE0QjtRQUF2RSxpQkFLQztRQUpDLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1FBQ25DLHdFQUF3RTtRQUN4RSxtRUFBbUU7UUFDbkUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUI7OztRQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsd0NBQXdDLENBQUMsUUFBUSxDQUFDLEVBQXZELENBQXVELEVBQUMsQ0FBQztJQUMvRixDQUFDOzs7OztJQUVPLG9DQUFPOzs7O0lBQWY7UUFDRSx1RUFBdUU7UUFDdkUsNERBQTREO1FBQzVELDRDQUE0QztRQUM1QywwRUFBMEU7UUFDMUUsb0JBQW9CO1FBQ3BCLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLElBQUksQ0FBQyxhQUFhLEtBQUssSUFBSSxFQUFFO1lBQ3BFLE9BQU87U0FDUjtRQUVELCtDQUErQztRQUMvQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO0lBQzVCLENBQUM7Ozs7OztJQUVPLHFFQUF3Qzs7Ozs7SUFBaEQsVUFBaUQsUUFBdUI7OztZQUNoRSxnQkFBZ0IsR0FBRyx3QkFBd0IsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQ0FFOUQsTUFBSSxFQUFFLFlBQVk7WUFDN0IsbUJBQUEsT0FBSyxhQUFhLEVBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFJOzs7O1lBQUUsVUFBQyxLQUFrQjtnQkFDNUQsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMzQixDQUFDLEVBQUMsQ0FBQzs7OztZQUhMLEtBQXFDLElBQUEscUJBQUEsU0FBQSxnQkFBZ0IsQ0FBQSxrREFBQTtnQkFBMUMsSUFBQSwrQkFBc0IsRUFBcEIsZ0JBQUksRUFBRSw4QkFBWTt3QkFBbEIsTUFBSSxFQUFFLFlBQVk7YUFJOUI7Ozs7Ozs7OztJQUNILENBQUM7O2dCQXZERixVQUFVOzs7O2dCQXhCcUIsTUFBTTs2Q0EyQ0MsTUFBTSxTQUFDLFdBQVc7O0lBcUN6RCx5QkFBQztDQUFBLEFBeERELElBd0RDO1NBdkRZLGtCQUFrQjs7Ozs7OztJQUk3Qix1Q0FVRTs7Ozs7SUFFRiwyQ0FBbUQ7Ozs7O0lBRXZDLG9DQUFzQjs7Ozs7SUFBRSx3Q0FBK0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkRlc3Ryb3ksIEluamVjdGFibGUsIE5nWm9uZSwgSW5qZWN0LCBFdmVudEVtaXR0ZXIsIFBMQVRGT1JNX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtU2VydmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgQmFzZURpcmVjdGl2ZSB9IGZyb20gJy4vYmFzZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRXZlbnRzTWFwLCBMb3R0aWVFdmVudCwgQW5pbWF0aW9uSXRlbSB9IGZyb20gJy4vc3ltYm9scyc7XG5cbi8qKlxuICogUmV0dXJucyBvbmx5IHRob3NlIGBFdmVudEVtaXR0ZXJgIGluc3RhbmNlcyB0aGF0IGhhcyBhdHRhY2hlZCBvYnNlcnZlcnNcbiAqL1xuZnVuY3Rpb24gZ2V0T2JzZXJ2ZWRFdmVudEVtaXR0ZXJzKGluc3RhbmNlOiBCYXNlRGlyZWN0aXZlLCBldmVudHNNYXA6IEV2ZW50c01hcCkge1xuICByZXR1cm4gT2JqZWN0LmtleXMoaW5zdGFuY2UpXG4gICAgLm1hcChrZXkgPT4gW2tleSwgaW5zdGFuY2Vba2V5XV0pXG4gICAgLmZpbHRlcihcbiAgICAgIChba2V5LCBwcm9wZXJ0eV0pID0+XG4gICAgICAgIHByb3BlcnR5IGluc3RhbmNlb2YgRXZlbnRFbWl0dGVyICYmXG4gICAgICAgIHByb3BlcnR5Lm9ic2VydmVycy5sZW5ndGggPiAwICYmXG4gICAgICAgIGV2ZW50c01hcC5oYXNPd25Qcm9wZXJ0eShrZXkpXG4gICAgKVxuICAgIC5tYXAoKFtrZXksIGV2ZW50RW1pdHRlcl0pID0+ICh7XG4gICAgICBldmVudEVtaXR0ZXIsXG4gICAgICBuYW1lOiBldmVudHNNYXBba2V5XVxuICAgIH0pKTtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIExvdHRpZUV2ZW50c0ZhY2FkZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9haXJibmIvbG90dGllLXdlYiNldmVudHNcbiAgICovXG4gIHByaXZhdGUgZXZlbnRzTWFwOiBFdmVudHNNYXAgPSB7XG4gICAgY29tcGxldGU6ICdjb21wbGV0ZScsXG4gICAgbG9vcENvbXBsZXRlOiAnbG9vcENvbXBsZXRlJyxcbiAgICBlbnRlckZyYW1lOiAnZW50ZXJGcmFtZScsXG4gICAgc2VnbWVudFN0YXJ0OiAnc2VnbWVudFN0YXJ0JyxcbiAgICBjb25maWdSZWFkeTogJ2NvbmZpZ19yZWFkeScsXG4gICAgZGF0YVJlYWR5OiAnZGF0YV9yZWFkeScsXG4gICAgZG9tTG9hZGVkOiAnRE9NTG9hZGVkJyxcbiAgICBkZXN0cm95OiAnZGVzdHJveScsXG4gICAgZXJyb3I6ICdlcnJvcidcbiAgfTtcblxuICBwcml2YXRlIGFuaW1hdGlvbkl0ZW06IEFuaW1hdGlvbkl0ZW0gfCBudWxsID0gbnVsbDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5nWm9uZTogTmdab25lLCBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IHN0cmluZykge31cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmRpc3Bvc2UoKTtcbiAgfVxuXG4gIGFkZEV2ZW50TGlzdGVuZXJzKGluc3RhbmNlOiBCYXNlRGlyZWN0aXZlLCBhbmltYXRpb25JdGVtOiBBbmltYXRpb25JdGVtKTogdm9pZCB7XG4gICAgdGhpcy5hbmltYXRpb25JdGVtID0gYW5pbWF0aW9uSXRlbTtcbiAgICAvLyBgQW5pbWF0aW9uSXRlbWAgdHJpZ2dlcnMgZGlmZmVyZW50IGV2ZW50cyBldmVyeSBtcywgd2UgaGF2ZSB0byBsaXN0ZW5cbiAgICAvLyB0aGVtIG91dHNpZGUgQW5ndWxhcidzIGNvbnRleHQsIHRodXMgaXQgd29uJ3QgYWZmZWN0IHBlcmZvcm1hbmNlXG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gdGhpcy5hZGRFdmVudExpc3RlbmVyc1RvT2JzZXJ2ZWRFdmVudEVtaXR0ZXJzKGluc3RhbmNlKSk7XG4gIH1cblxuICBwcml2YXRlIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgLy8gVGhlIGBuZy1sb3R0aWVgIGNvbXBvbmVudCBvciB0aGUgYGxvdHRpZWAgZGlyZWN0aXZlIGNhbiBiZSBkZXN0cm95ZWRcbiAgICAvLyBiZWZvcmUgdGhlIGBhbmltYXRpb25JdGVtYCBpcyBzZXQsIHRodXMgaXQgd2lsbCBmYWlsIHdpdGhcbiAgICAvLyBgQ2Fubm90IHJlYWQgcHJvcGVydHkgJ2Rlc3Ryb3knIG9mIG51bGxgLlxuICAgIC8vIFBvdGVudGlhbGx5IGl0IGNhbiBoYXBwZW4gaWYgdGhlIGRpcmVjdGl2ZSBnZXRzIGRlc3Ryb3llZCBiZWZvcmUgY2hhbmdlXG4gICAgLy8gZGV0ZWN0aW9uIGlzIHJ1bi5cbiAgICBpZiAoaXNQbGF0Zm9ybVNlcnZlcih0aGlzLnBsYXRmb3JtSWQpIHx8IHRoaXMuYW5pbWF0aW9uSXRlbSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGBkZXN0cm95KClgIHdpbGwgcmVtb3ZlIGFsbCBldmVudHMgbGlzdGVuZXJzXG4gICAgdGhpcy5hbmltYXRpb25JdGVtLmRlc3Ryb3koKTtcbiAgICB0aGlzLmFuaW1hdGlvbkl0ZW0gPSBudWxsO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRFdmVudExpc3RlbmVyc1RvT2JzZXJ2ZWRFdmVudEVtaXR0ZXJzKGluc3RhbmNlOiBCYXNlRGlyZWN0aXZlKTogdm9pZCB7XG4gICAgY29uc3Qgb2JzZXJ2ZWRFbWl0dGVycyA9IGdldE9ic2VydmVkRXZlbnRFbWl0dGVycyhpbnN0YW5jZSwgdGhpcy5ldmVudHNNYXApO1xuXG4gICAgZm9yIChjb25zdCB7IG5hbWUsIGV2ZW50RW1pdHRlciB9IG9mIG9ic2VydmVkRW1pdHRlcnMpIHtcbiAgICAgIHRoaXMuYW5pbWF0aW9uSXRlbSEuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCAoZXZlbnQ6IExvdHRpZUV2ZW50KSA9PiB7XG4gICAgICAgIGV2ZW50RW1pdHRlci5lbWl0KGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuIl19