/**
 * @fileoverview added by tsickle
 * Generated from: src/transfer-state.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { TransferState, makeStateKey } from '@angular/platform-browser';
import { transformAnimationFilenameToKey } from './utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
var LottieTransferState = /** @class */ (function () {
    function LottieTransferState(transferState) {
        this.transferState = transferState;
    }
    /**
     * @template T
     * @param {?} animation
     * @return {?}
     */
    LottieTransferState.prototype.get = /**
     * @template T
     * @param {?} animation
     * @return {?}
     */
    function (animation) {
        /** @type {?} */
        var animationKey = transformAnimationFilenameToKey(animation);
        /** @type {?} */
        var stateKey = makeStateKey(animationKey);
        return this.transferState.get(stateKey, null);
    };
    LottieTransferState.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    LottieTransferState.ctorParameters = function () { return [
        { type: TransferState }
    ]; };
    /** @nocollapse */ LottieTransferState.ɵprov = i0.ɵɵdefineInjectable({ factory: function LottieTransferState_Factory() { return new LottieTransferState(i0.ɵɵinject(i1.TransferState)); }, token: LottieTransferState, providedIn: "root" });
    return LottieTransferState;
}());
export { LottieTransferState };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LottieTransferState.prototype.transferState;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmZXItc3RhdGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtbG90dGllLyIsInNvdXJjZXMiOlsic3JjL3RyYW5zZmVyLXN0YXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBR3hFLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLFNBQVMsQ0FBQzs7O0FBRTFEO0lBRUUsNkJBQW9CLGFBQTRCO1FBQTVCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0lBQUcsQ0FBQzs7Ozs7O0lBRXBELGlDQUFHOzs7OztJQUFILFVBQU8sU0FBNEI7O1lBQzNCLFlBQVksR0FBRywrQkFBK0IsQ0FBQyxTQUFTLENBQUM7O1lBQ3pELFFBQVEsR0FBRyxZQUFZLENBQUksWUFBWSxDQUFDO1FBQzlDLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2hELENBQUM7O2dCQVJGLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7Ozs7Z0JBTHpCLGFBQWE7Ozs4QkFEdEI7Q0FlQyxBQVRELElBU0M7U0FSWSxtQkFBbUI7Ozs7OztJQUNsQiw0Q0FBb0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUcmFuc2ZlclN0YXRlLCBtYWtlU3RhdGVLZXkgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcblxuaW1wb3J0IHsgQW5pbWF0aW9uRmlsZW5hbWUgfSBmcm9tICcuL3N5bWJvbHMnO1xuaW1wb3J0IHsgdHJhbnNmb3JtQW5pbWF0aW9uRmlsZW5hbWVUb0tleSB9IGZyb20gJy4vdXRpbHMnO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIExvdHRpZVRyYW5zZmVyU3RhdGUge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRyYW5zZmVyU3RhdGU6IFRyYW5zZmVyU3RhdGUpIHt9XG5cbiAgZ2V0PFQ+KGFuaW1hdGlvbjogQW5pbWF0aW9uRmlsZW5hbWUpOiBUIHwgbnVsbCB7XG4gICAgY29uc3QgYW5pbWF0aW9uS2V5ID0gdHJhbnNmb3JtQW5pbWF0aW9uRmlsZW5hbWVUb0tleShhbmltYXRpb24pO1xuICAgIGNvbnN0IHN0YXRlS2V5ID0gbWFrZVN0YXRlS2V5PFQ+KGFuaW1hdGlvbktleSk7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNmZXJTdGF0ZS5nZXQoc3RhdGVLZXksIG51bGwpO1xuICB9XG59XG4iXX0=