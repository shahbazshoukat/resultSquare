/**
 * @fileoverview added by tsickle
 * Generated from: src/base.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformServer } from '@angular/common';
import { Subject } from 'rxjs';
import { AnimationLoader } from './animation-loader';
var BaseDirective = /** @class */ (function () {
    function BaseDirective(platformId, animationLoader) {
        this.platformId = platformId;
        this.animationLoader = animationLoader;
        this.options = null;
        this.containerClass = null;
        this.styles = null;
        this.width = null;
        this.height = null;
        /**
         * `animationCreated` is dispatched after calling `loadAnimation`
         */
        this.animationCreated = new EventEmitter();
        /**
         * `complete` is dispatched after completing the last frame
         */
        this.complete = new EventEmitter();
        /**
         * `loopComplete` is dispatched after completing frame loop
         */
        this.loopComplete = new EventEmitter();
        /**
         * `enterFrame` is dispatched after entering the new frame
         */
        this.enterFrame = new EventEmitter();
        /**
         * `segmentStart` is dispatched when the new segment is adjusted
         */
        this.segmentStart = new EventEmitter();
        /**
         * Original event name is `config_ready`. `config_ready` is dispatched
         * after the needed renderer is configured
         */
        this.configReady = new EventEmitter();
        /**
         * Original event name is `data_ready`. `data_ready` is dispatched
         * when all parts of the animation have been loaded
         */
        this.dataReady = new EventEmitter();
        /**
         * Original event name is `DOMLoaded`. `DOMLoaded` is dispatched
         * when elements have been added to the DOM
         */
        this.domLoaded = new EventEmitter();
        /**
         * `destroy` will be dispatched in the `ngOnDestroy` hook of the service,
         * it's useful for releasing resources
         */
        this.destroy = new EventEmitter();
        /**
         * `error` will be dispatched if the lottie player could not render
         * some frame or parse config
         */
        this.error = new EventEmitter();
        this.destroy$ = new Subject();
    }
    /**
     * @return {?}
     */
    BaseDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    /**
     * @protected
     * @return {?}
     */
    BaseDirective.prototype.setWidthAndHeight = /**
     * @protected
     * @return {?}
     */
    function () {
        this.width = this.width || '100%';
        this.height = this.height || '100%';
    };
    /**
     * @protected
     * @param {?} container
     * @param {?} eventsFacade
     * @param {?} instance
     * @return {?}
     */
    BaseDirective.prototype.loadAnimation = /**
     * @protected
     * @param {?} container
     * @param {?} eventsFacade
     * @param {?} instance
     * @return {?}
     */
    function (container, eventsFacade, instance) {
        if (isPlatformServer(this.platformId)) {
            return;
        }
        this.animationLoader.resolveLoaderAndLoadAnimation(this.options, container, eventsFacade, this.animationCreated, instance, this.destroy$);
    };
    BaseDirective.decorators = [
        { type: Directive, args: [{ selector: '[lottie]' },] }
    ];
    /** @nocollapse */
    BaseDirective.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: AnimationLoader }
    ]; };
    BaseDirective.propDecorators = {
        options: [{ type: Input }],
        containerClass: [{ type: Input }],
        styles: [{ type: Input }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        animationCreated: [{ type: Output }],
        complete: [{ type: Output }],
        loopComplete: [{ type: Output }],
        enterFrame: [{ type: Output }],
        segmentStart: [{ type: Output }],
        configReady: [{ type: Output }],
        dataReady: [{ type: Output }],
        domLoaded: [{ type: Output }],
        destroy: [{ type: Output }],
        error: [{ type: Output }]
    };
    return BaseDirective;
}());
export { BaseDirective };
if (false) {
    /** @type {?} */
    BaseDirective.prototype.options;
    /** @type {?} */
    BaseDirective.prototype.containerClass;
    /** @type {?} */
    BaseDirective.prototype.styles;
    /** @type {?} */
    BaseDirective.prototype.width;
    /** @type {?} */
    BaseDirective.prototype.height;
    /**
     * `animationCreated` is dispatched after calling `loadAnimation`
     * @type {?}
     */
    BaseDirective.prototype.animationCreated;
    /**
     * `complete` is dispatched after completing the last frame
     * @type {?}
     */
    BaseDirective.prototype.complete;
    /**
     * `loopComplete` is dispatched after completing frame loop
     * @type {?}
     */
    BaseDirective.prototype.loopComplete;
    /**
     * `enterFrame` is dispatched after entering the new frame
     * @type {?}
     */
    BaseDirective.prototype.enterFrame;
    /**
     * `segmentStart` is dispatched when the new segment is adjusted
     * @type {?}
     */
    BaseDirective.prototype.segmentStart;
    /**
     * Original event name is `config_ready`. `config_ready` is dispatched
     * after the needed renderer is configured
     * @type {?}
     */
    BaseDirective.prototype.configReady;
    /**
     * Original event name is `data_ready`. `data_ready` is dispatched
     * when all parts of the animation have been loaded
     * @type {?}
     */
    BaseDirective.prototype.dataReady;
    /**
     * Original event name is `DOMLoaded`. `DOMLoaded` is dispatched
     * when elements have been added to the DOM
     * @type {?}
     */
    BaseDirective.prototype.domLoaded;
    /**
     * `destroy` will be dispatched in the `ngOnDestroy` hook of the service,
     * it's useful for releasing resources
     * @type {?}
     */
    BaseDirective.prototype.destroy;
    /**
     * `error` will be dispatched if the lottie player could not render
     * some frame or parse config
     * @type {?}
     */
    BaseDirective.prototype.error;
    /**
     * @type {?}
     * @private
     */
    BaseDirective.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    BaseDirective.prototype.platformId;
    /**
     * @type {?}
     * @private
     */
    BaseDirective.prototype.animationLoader;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtbG90dGllLyIsInNvdXJjZXMiOlsic3JjL2Jhc2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWixNQUFNLEVBQ04sV0FBVyxFQUVaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRW5ELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFhL0IsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBR3JEO0lBcUVFLHVCQUMrQixVQUFrQixFQUN2QyxlQUFnQztRQURYLGVBQVUsR0FBVixVQUFVLENBQVE7UUFDdkMsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBckVqQyxZQUFPLEdBQTRCLElBQUksQ0FBQztRQUV4QyxtQkFBYyxHQUFrQixJQUFJLENBQUM7UUFFckMsV0FBTSxHQUF3QyxJQUFJLENBQUM7UUFFbkQsVUFBSyxHQUFrQixJQUFJLENBQUM7UUFFNUIsV0FBTSxHQUFrQixJQUFJLENBQUM7Ozs7UUFLNUIscUJBQWdCLEdBQUcsSUFBSSxZQUFZLEVBQWlCLENBQUM7Ozs7UUFLckQsYUFBUSxHQUFHLElBQUksWUFBWSxFQUFtQixDQUFDOzs7O1FBSy9DLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQXVCLENBQUM7Ozs7UUFLdkQsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFxQixDQUFDOzs7O1FBS25ELGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQXVCLENBQUM7Ozs7O1FBTXZELGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQzs7Ozs7UUFNdkMsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7Ozs7O1FBTXJDLGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDOzs7OztRQU1yQyxZQUFPLEdBQUcsSUFBSSxZQUFZLEVBQWtCLENBQUM7Ozs7O1FBTTdDLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBZ0QsQ0FBQztRQUUzRSxhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztJQUtwQyxDQUFDOzs7O0lBRUosbUNBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzNCLENBQUM7Ozs7O0lBRVMseUNBQWlCOzs7O0lBQTNCO1FBQ0UsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQztRQUNsQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDO0lBQ3RDLENBQUM7Ozs7Ozs7O0lBRVMscUNBQWE7Ozs7Ozs7SUFBdkIsVUFDRSxTQUEwQyxFQUMxQyxZQUFnQyxFQUNoQyxRQUF1QjtRQUV2QixJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNyQyxPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsZUFBZSxDQUFDLDZCQUE2QixDQUNoRCxJQUFJLENBQUMsT0FBTyxFQUNaLFNBQVMsRUFDVCxZQUFZLEVBQ1osSUFBSSxDQUFDLGdCQUFnQixFQUNyQixRQUFRLEVBQ1IsSUFBSSxDQUFDLFFBQVEsQ0FDZCxDQUFDO0lBQ0osQ0FBQzs7Z0JBckdGLFNBQVMsU0FBQyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUU7Ozs7NkNBc0U5QixNQUFNLFNBQUMsV0FBVztnQkF6RWQsZUFBZTs7OzBCQUtyQixLQUFLO2lDQUVMLEtBQUs7eUJBRUwsS0FBSzt3QkFFTCxLQUFLO3lCQUVMLEtBQUs7bUNBS0wsTUFBTTsyQkFLTixNQUFNOytCQUtOLE1BQU07NkJBS04sTUFBTTsrQkFLTixNQUFNOzhCQU1OLE1BQU07NEJBTU4sTUFBTTs0QkFNTixNQUFNOzBCQU1OLE1BQU07d0JBTU4sTUFBTTs7SUFxQ1Qsb0JBQUM7Q0FBQSxBQXRHRCxJQXNHQztTQXJHWSxhQUFhOzs7SUFDeEIsZ0NBQWlEOztJQUVqRCx1Q0FBOEM7O0lBRTlDLCtCQUE0RDs7SUFFNUQsOEJBQXFDOztJQUVyQywrQkFBc0M7Ozs7O0lBS3RDLHlDQUErRDs7Ozs7SUFLL0QsaUNBQXlEOzs7OztJQUt6RCxxQ0FBaUU7Ozs7O0lBS2pFLG1DQUE2RDs7Ozs7SUFLN0QscUNBQWlFOzs7Ozs7SUFNakUsb0NBQWlEOzs7Ozs7SUFNakQsa0NBQStDOzs7Ozs7SUFNL0Msa0NBQStDOzs7Ozs7SUFNL0MsZ0NBQXVEOzs7Ozs7SUFNdkQsOEJBQW1GOzs7OztJQUVuRixpQ0FBdUM7Ozs7O0lBR3JDLG1DQUErQzs7Ozs7SUFDL0Msd0NBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBFdmVudEVtaXR0ZXIsXG4gIEluamVjdCxcbiAgUExBVEZPUk1fSUQsXG4gIE9uRGVzdHJveVxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1TZXJ2ZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7XG4gIEFuaW1hdGlvbk9wdGlvbnMsXG4gIEJNQ29tcGxldGVFdmVudCxcbiAgQk1Db21wbGV0ZUxvb3BFdmVudCxcbiAgQk1FbnRlckZyYW1lRXZlbnQsXG4gIEJNU2VnbWVudFN0YXJ0RXZlbnQsXG4gIEJNRGVzdHJveUV2ZW50LFxuICBCTVJlbmRlckZyYW1lRXJyb3JFdmVudCxcbiAgQk1Db25maWdFcnJvckV2ZW50LFxuICBBbmltYXRpb25JdGVtXG59IGZyb20gJy4vc3ltYm9scyc7XG5pbXBvcnQgeyBBbmltYXRpb25Mb2FkZXIgfSBmcm9tICcuL2FuaW1hdGlvbi1sb2FkZXInO1xuaW1wb3J0IHsgTG90dGllRXZlbnRzRmFjYWRlIH0gZnJvbSAnLi9ldmVudHMtZmFjYWRlJztcblxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW2xvdHRpZV0nIH0pXG5leHBvcnQgY2xhc3MgQmFzZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIG9wdGlvbnM6IEFuaW1hdGlvbk9wdGlvbnMgfCBudWxsID0gbnVsbDtcblxuICBASW5wdXQoKSBjb250YWluZXJDbGFzczogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG5cbiAgQElucHV0KCkgc3R5bGVzOiBQYXJ0aWFsPENTU1N0eWxlRGVjbGFyYXRpb24+IHwgbnVsbCA9IG51bGw7XG5cbiAgQElucHV0KCkgd2lkdGg6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXG4gIEBJbnB1dCgpIGhlaWdodDogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG5cbiAgLyoqXG4gICAqIGBhbmltYXRpb25DcmVhdGVkYCBpcyBkaXNwYXRjaGVkIGFmdGVyIGNhbGxpbmcgYGxvYWRBbmltYXRpb25gXG4gICAqL1xuICBAT3V0cHV0KCkgYW5pbWF0aW9uQ3JlYXRlZCA9IG5ldyBFdmVudEVtaXR0ZXI8QW5pbWF0aW9uSXRlbT4oKTtcblxuICAvKipcbiAgICogYGNvbXBsZXRlYCBpcyBkaXNwYXRjaGVkIGFmdGVyIGNvbXBsZXRpbmcgdGhlIGxhc3QgZnJhbWVcbiAgICovXG4gIEBPdXRwdXQoKSBjb21wbGV0ZSA9IG5ldyBFdmVudEVtaXR0ZXI8Qk1Db21wbGV0ZUV2ZW50PigpO1xuXG4gIC8qKlxuICAgKiBgbG9vcENvbXBsZXRlYCBpcyBkaXNwYXRjaGVkIGFmdGVyIGNvbXBsZXRpbmcgZnJhbWUgbG9vcFxuICAgKi9cbiAgQE91dHB1dCgpIGxvb3BDb21wbGV0ZSA9IG5ldyBFdmVudEVtaXR0ZXI8Qk1Db21wbGV0ZUxvb3BFdmVudD4oKTtcblxuICAvKipcbiAgICogYGVudGVyRnJhbWVgIGlzIGRpc3BhdGNoZWQgYWZ0ZXIgZW50ZXJpbmcgdGhlIG5ldyBmcmFtZVxuICAgKi9cbiAgQE91dHB1dCgpIGVudGVyRnJhbWUgPSBuZXcgRXZlbnRFbWl0dGVyPEJNRW50ZXJGcmFtZUV2ZW50PigpO1xuXG4gIC8qKlxuICAgKiBgc2VnbWVudFN0YXJ0YCBpcyBkaXNwYXRjaGVkIHdoZW4gdGhlIG5ldyBzZWdtZW50IGlzIGFkanVzdGVkXG4gICAqL1xuICBAT3V0cHV0KCkgc2VnbWVudFN0YXJ0ID0gbmV3IEV2ZW50RW1pdHRlcjxCTVNlZ21lbnRTdGFydEV2ZW50PigpO1xuXG4gIC8qKlxuICAgKiBPcmlnaW5hbCBldmVudCBuYW1lIGlzIGBjb25maWdfcmVhZHlgLiBgY29uZmlnX3JlYWR5YCBpcyBkaXNwYXRjaGVkXG4gICAqIGFmdGVyIHRoZSBuZWVkZWQgcmVuZGVyZXIgaXMgY29uZmlndXJlZFxuICAgKi9cbiAgQE91dHB1dCgpIGNvbmZpZ1JlYWR5ID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gIC8qKlxuICAgKiBPcmlnaW5hbCBldmVudCBuYW1lIGlzIGBkYXRhX3JlYWR5YC4gYGRhdGFfcmVhZHlgIGlzIGRpc3BhdGNoZWRcbiAgICogd2hlbiBhbGwgcGFydHMgb2YgdGhlIGFuaW1hdGlvbiBoYXZlIGJlZW4gbG9hZGVkXG4gICAqL1xuICBAT3V0cHV0KCkgZGF0YVJlYWR5ID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gIC8qKlxuICAgKiBPcmlnaW5hbCBldmVudCBuYW1lIGlzIGBET01Mb2FkZWRgLiBgRE9NTG9hZGVkYCBpcyBkaXNwYXRjaGVkXG4gICAqIHdoZW4gZWxlbWVudHMgaGF2ZSBiZWVuIGFkZGVkIHRvIHRoZSBET01cbiAgICovXG4gIEBPdXRwdXQoKSBkb21Mb2FkZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgLyoqXG4gICAqIGBkZXN0cm95YCB3aWxsIGJlIGRpc3BhdGNoZWQgaW4gdGhlIGBuZ09uRGVzdHJveWAgaG9vayBvZiB0aGUgc2VydmljZSxcbiAgICogaXQncyB1c2VmdWwgZm9yIHJlbGVhc2luZyByZXNvdXJjZXNcbiAgICovXG4gIEBPdXRwdXQoKSBkZXN0cm95ID0gbmV3IEV2ZW50RW1pdHRlcjxCTURlc3Ryb3lFdmVudD4oKTtcblxuICAvKipcbiAgICogYGVycm9yYCB3aWxsIGJlIGRpc3BhdGNoZWQgaWYgdGhlIGxvdHRpZSBwbGF5ZXIgY291bGQgbm90IHJlbmRlclxuICAgKiBzb21lIGZyYW1lIG9yIHBhcnNlIGNvbmZpZ1xuICAgKi9cbiAgQE91dHB1dCgpIGVycm9yID0gbmV3IEV2ZW50RW1pdHRlcjxCTVJlbmRlckZyYW1lRXJyb3JFdmVudCB8IEJNQ29uZmlnRXJyb3JFdmVudD4oKTtcblxuICBwcml2YXRlIGRlc3Ryb3kkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IHN0cmluZyxcbiAgICBwcml2YXRlIGFuaW1hdGlvbkxvYWRlcjogQW5pbWF0aW9uTG9hZGVyXG4gICkge31cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmRlc3Ryb3kkLm5leHQoKTtcbiAgICB0aGlzLmRlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc2V0V2lkdGhBbmRIZWlnaHQoKTogdm9pZCB7XG4gICAgdGhpcy53aWR0aCA9IHRoaXMud2lkdGggfHwgJzEwMCUnO1xuICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5oZWlnaHQgfHwgJzEwMCUnO1xuICB9XG5cbiAgcHJvdGVjdGVkIGxvYWRBbmltYXRpb24oXG4gICAgY29udGFpbmVyOiBIVE1MRWxlbWVudCB8IEhUTUxDYW52YXNFbGVtZW50LFxuICAgIGV2ZW50c0ZhY2FkZTogTG90dGllRXZlbnRzRmFjYWRlLFxuICAgIGluc3RhbmNlOiBCYXNlRGlyZWN0aXZlXG4gICk6IHZvaWQge1xuICAgIGlmIChpc1BsYXRmb3JtU2VydmVyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmFuaW1hdGlvbkxvYWRlci5yZXNvbHZlTG9hZGVyQW5kTG9hZEFuaW1hdGlvbihcbiAgICAgIHRoaXMub3B0aW9ucyxcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIGV2ZW50c0ZhY2FkZSxcbiAgICAgIHRoaXMuYW5pbWF0aW9uQ3JlYXRlZCxcbiAgICAgIGluc3RhbmNlLFxuICAgICAgdGhpcy5kZXN0cm95JFxuICAgICk7XG4gIH1cbn1cbiJdfQ==