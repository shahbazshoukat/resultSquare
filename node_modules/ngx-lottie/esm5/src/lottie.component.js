/**
 * @fileoverview added by tsickle
 * Generated from: src/lottie.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __extends } from "tslib";
import { Component, ChangeDetectionStrategy, Inject, ElementRef, ViewChild, Self, Renderer2, PLATFORM_ID } from '@angular/core';
import { BaseDirective } from './base.directive';
import { AnimationLoader } from './animation-loader';
import { LottieEventsFacade } from './events-facade';
var LottieComponent = /** @class */ (function (_super) {
    __extends(LottieComponent, _super);
    function LottieComponent(renderer, platformId, eventsFacade, animationLoader) {
        var _this = _super.call(this, platformId, animationLoader) || this;
        _this.renderer = renderer;
        _this.eventsFacade = eventsFacade;
        _this.container = (/** @type {?} */ (null));
        return _this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    LottieComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var containerClass = changes.containerClass;
        if (containerClass === undefined || typeof containerClass.currentValue !== 'string') {
            return;
        }
        this.renderer.addClass(this.container.nativeElement, containerClass.currentValue);
    };
    /**
     * @return {?}
     */
    LottieComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.setWidthAndHeight.call(this);
        _super.prototype.loadAnimation.call(this, this.container.nativeElement, this.eventsFacade, this);
    };
    LottieComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-lottie',
                    template: "\n    <div #container [style.width]=\"width\" [style.height]=\"height\" [ngStyle]=\"styles\"></div>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [LottieEventsFacade]
                }] }
    ];
    /** @nocollapse */
    LottieComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: LottieEventsFacade, decorators: [{ type: Self }] },
        { type: AnimationLoader }
    ]; };
    LottieComponent.propDecorators = {
        container: [{ type: ViewChild, args: ['container', { static: true },] }]
    };
    return LottieComponent;
}(BaseDirective));
export { LottieComponent };
if (false) {
    /** @type {?} */
    LottieComponent.prototype.container;
    /**
     * @type {?}
     * @private
     */
    LottieComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    LottieComponent.prototype.eventsFacade;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG90dGllLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1sb3R0aWUvIiwic291cmNlcyI6WyJzcmMvbG90dGllLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULHVCQUF1QixFQUV2QixNQUFNLEVBQ04sVUFBVSxFQUNWLFNBQVMsRUFDVCxJQUFJLEVBR0osU0FBUyxFQUNULFdBQVcsRUFDWixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXJEO0lBUXFDLG1DQUFhO0lBR2hELHlCQUNVLFFBQW1CLEVBQ04sVUFBa0IsRUFDdkIsWUFBZ0MsRUFDaEQsZUFBZ0M7UUFKbEMsWUFNRSxrQkFBTSxVQUFVLEVBQUUsZUFBZSxDQUFDLFNBQ25DO1FBTlMsY0FBUSxHQUFSLFFBQVEsQ0FBVztRQUVYLGtCQUFZLEdBQVosWUFBWSxDQUFvQjtRQUxSLGVBQVMsR0FBNEIsbUJBQUEsSUFBSSxFQUFDLENBQUM7O0lBU3JGLENBQUM7Ozs7O0lBRUQscUNBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCOztZQUMxQixjQUFjLEdBQUcsT0FBTyxDQUFDLGNBQWM7UUFFN0MsSUFBSSxjQUFjLEtBQUssU0FBUyxJQUFJLE9BQU8sY0FBYyxDQUFDLFlBQVksS0FBSyxRQUFRLEVBQUU7WUFDbkYsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3BGLENBQUM7Ozs7SUFFRCxrQ0FBUTs7O0lBQVI7UUFDRSxpQkFBTSxpQkFBaUIsV0FBRSxDQUFDO1FBQzFCLGlCQUFNLGFBQWEsWUFBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzdFLENBQUM7O2dCQWpDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLFdBQVc7b0JBQ3JCLFFBQVEsRUFBRSx5R0FFVDtvQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsU0FBUyxFQUFFLENBQUMsa0JBQWtCLENBQUM7aUJBQ2hDOzs7O2dCQWZDLFNBQVM7NkNBcUJOLE1BQU0sU0FBQyxXQUFXO2dCQWZkLGtCQUFrQix1QkFnQnRCLElBQUk7Z0JBakJBLGVBQWU7Ozs0QkFZckIsU0FBUyxTQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7O0lBeUIxQyxzQkFBQztDQUFBLEFBbENELENBUXFDLGFBQWEsR0EwQmpEO1NBMUJZLGVBQWU7OztJQUMxQixvQ0FBcUY7Ozs7O0lBR25GLG1DQUEyQjs7Ozs7SUFFM0IsdUNBQWdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgT25Jbml0LFxuICBJbmplY3QsXG4gIEVsZW1lbnRSZWYsXG4gIFZpZXdDaGlsZCxcbiAgU2VsZixcbiAgT25DaGFuZ2VzLFxuICBTaW1wbGVDaGFuZ2VzLFxuICBSZW5kZXJlcjIsXG4gIFBMQVRGT1JNX0lEXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBCYXNlRGlyZWN0aXZlIH0gZnJvbSAnLi9iYXNlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBBbmltYXRpb25Mb2FkZXIgfSBmcm9tICcuL2FuaW1hdGlvbi1sb2FkZXInO1xuaW1wb3J0IHsgTG90dGllRXZlbnRzRmFjYWRlIH0gZnJvbSAnLi9ldmVudHMtZmFjYWRlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmctbG90dGllJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2ICNjb250YWluZXIgW3N0eWxlLndpZHRoXT1cIndpZHRoXCIgW3N0eWxlLmhlaWdodF09XCJoZWlnaHRcIiBbbmdTdHlsZV09XCJzdHlsZXNcIj48L2Rpdj5cbiAgYCxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHByb3ZpZGVyczogW0xvdHRpZUV2ZW50c0ZhY2FkZV1cbn0pXG5leHBvcnQgY2xhc3MgTG90dGllQ29tcG9uZW50IGV4dGVuZHMgQmFzZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0IHtcbiAgQFZpZXdDaGlsZCgnY29udGFpbmVyJywgeyBzdGF0aWM6IHRydWUgfSkgY29udGFpbmVyOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PiA9IG51bGwhO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwbGF0Zm9ybUlkOiBzdHJpbmcsXG4gICAgQFNlbGYoKSBwcml2YXRlIGV2ZW50c0ZhY2FkZTogTG90dGllRXZlbnRzRmFjYWRlLFxuICAgIGFuaW1hdGlvbkxvYWRlcjogQW5pbWF0aW9uTG9hZGVyXG4gICkge1xuICAgIHN1cGVyKHBsYXRmb3JtSWQsIGFuaW1hdGlvbkxvYWRlcik7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgY29uc3QgY29udGFpbmVyQ2xhc3MgPSBjaGFuZ2VzLmNvbnRhaW5lckNsYXNzO1xuXG4gICAgaWYgKGNvbnRhaW5lckNsYXNzID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIGNvbnRhaW5lckNsYXNzLmN1cnJlbnRWYWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuY29udGFpbmVyLm5hdGl2ZUVsZW1lbnQsIGNvbnRhaW5lckNsYXNzLmN1cnJlbnRWYWx1ZSk7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBzdXBlci5zZXRXaWR0aEFuZEhlaWdodCgpO1xuICAgIHN1cGVyLmxvYWRBbmltYXRpb24odGhpcy5jb250YWluZXIubmF0aXZlRWxlbWVudCwgdGhpcy5ldmVudHNGYWNhZGUsIHRoaXMpO1xuICB9XG59XG4iXX0=