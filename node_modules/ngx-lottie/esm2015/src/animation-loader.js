/**
 * @fileoverview added by tsickle
 * Generated from: src/animation-loader.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformServer, DOCUMENT } from '@angular/common';
import { takeUntil } from 'rxjs/operators';
import { IS_SAFARI, LOTTIE_OPTIONS, ANIMATION_CACHE } from './symbols';
import { awaitConfigAndCache, setPlayerLocationHref, mergeOptionsWithDefault, streamifyPlayerOrLoader } from './utils';
// This has to be dynamic as `Document` interface is not
// accepted by the ngc compiler
// @dynamic
export class AnimationLoader {
    /**
     * @param {?} ngZone
     * @param {?} platformId
     * @param {?} document
     * @param {?} isSafari
     * @param {?} options
     * @param {?} animationCache
     */
    constructor(ngZone, platformId, document, isSafari, options, animationCache) {
        this.ngZone = ngZone;
        this.platformId = platformId;
        this.document = document;
        this.isSafari = isSafari;
        this.options = options;
        this.animationCache = animationCache;
        this.player$ = streamifyPlayerOrLoader(this.options.player);
    }
    /**
     * @param {?} options
     * @param {?} container
     * @param {?} eventsFacade
     * @param {?} animationCreated
     * @param {?} instance
     * @param {?} destroy$
     * @return {?}
     */
    resolveLoaderAndLoadAnimation(options, container, eventsFacade, animationCreated, instance, destroy$) {
        if (isPlatformServer(this.platformId)) {
            return;
        }
        this.player$.pipe(takeUntil(destroy$)).subscribe((/**
         * @param {?} player
         * @return {?}
         */
        player => {
            /** @type {?} */
            const mergedOptions = mergeOptionsWithDefault(options, container, this.animationCache);
            this.loadAnimation(player, mergedOptions, eventsFacade, animationCreated, instance);
        }));
    }
    /**
     * @private
     * @param {?} player
     * @param {?} options
     * @param {?} eventsFacade
     * @param {?} animationCreated
     * @param {?} instance
     * @return {?}
     */
    loadAnimation(player, options, eventsFacade, animationCreated, instance) {
        setPlayerLocationHref(player, this.document.location.href, this.isSafari);
        /** @type {?} */
        const animationItem = this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => player.loadAnimation(options)));
        awaitConfigAndCache(this.animationCache, options, animationItem);
        // Dispatch `animationCreated` event after animation is loaded successfully
        animationCreated.emit(animationItem);
        eventsFacade.addEventListeners(instance, animationItem);
    }
}
AnimationLoader.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AnimationLoader.ctorParameters = () => [
    { type: NgZone },
    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [IS_SAFARI,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [LOTTIE_OPTIONS,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [ANIMATION_CACHE,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.player$;
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.platformId;
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.document;
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.isSafari;
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.options;
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.animationCache;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9uLWxvYWRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1sb3R0aWUvIiwic291cmNlcyI6WyJzcmMvYW5pbWF0aW9uLWxvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBZ0IsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUc3RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0MsT0FBTyxFQU9MLFNBQVMsRUFDVCxjQUFjLEVBQ2QsZUFBZSxFQUNoQixNQUFNLFdBQVcsQ0FBQztBQUNuQixPQUFPLEVBQ0wsbUJBQW1CLEVBQ25CLHFCQUFxQixFQUNyQix1QkFBdUIsRUFDdkIsdUJBQXVCLEVBQ3hCLE1BQU0sU0FBUyxDQUFDOzs7O0FBU2pCLE1BQU0sT0FBTyxlQUFlOzs7Ozs7Ozs7SUFHMUIsWUFDVSxNQUFjLEVBQ08sVUFBa0IsRUFDckIsUUFBa0IsRUFDakIsUUFBaUIsRUFDWixPQUFzQixFQUNyQixjQUFxQztRQUw5RCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ08sZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQUNyQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2pCLGFBQVEsR0FBUixRQUFRLENBQVM7UUFDWixZQUFPLEdBQVAsT0FBTyxDQUFlO1FBQ3JCLG1CQUFjLEdBQWQsY0FBYyxDQUF1QjtRQVJoRSxZQUFPLEdBQUcsdUJBQXVCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQVM1RCxDQUFDOzs7Ozs7Ozs7O0lBRUosNkJBQTZCLENBQzNCLE9BQWdDLEVBQ2hDLFNBQXNCLEVBQ3RCLFlBQWdDLEVBQ2hDLGdCQUE2QyxFQUM3QyxRQUF1QixFQUN2QixRQUF1QjtRQUV2QixJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNyQyxPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTOzs7O1FBQUMsTUFBTSxDQUFDLEVBQUU7O2tCQUNsRCxhQUFhLEdBQUcsdUJBQXVCLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDO1lBQ3RGLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDdEYsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7Ozs7Ozs7O0lBRU8sYUFBYSxDQUNuQixNQUFvQixFQUNwQixPQUEwRCxFQUMxRCxZQUFnQyxFQUNoQyxnQkFBNkMsRUFDN0MsUUFBdUI7UUFFdkIscUJBQXFCLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7O2NBQ3BFLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQjs7O1FBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsRUFBQztRQUN4RixtQkFBbUIsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNqRSwyRUFBMkU7UUFDM0UsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3JDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDMUQsQ0FBQzs7O1lBNUNGLFVBQVU7Ozs7WUE5QlUsTUFBTTt5Q0FvQ3RCLE1BQU0sU0FBQyxXQUFXO1lBQ2lCLFFBQVEsdUJBQTNDLE1BQU0sU0FBQyxRQUFROzBDQUNmLE1BQU0sU0FBQyxTQUFTOzRDQUNoQixNQUFNLFNBQUMsY0FBYzs0Q0FDckIsTUFBTSxTQUFDLGVBQWU7Ozs7Ozs7SUFSekIsa0NBQStEOzs7OztJQUc3RCxpQ0FBc0I7Ozs7O0lBQ3RCLHFDQUErQzs7Ozs7SUFDL0MsbUNBQTRDOzs7OztJQUM1QyxtQ0FBNEM7Ozs7O0lBQzVDLGtDQUFzRDs7Ozs7SUFDdEQseUNBQXNFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgTmdab25lLCBJbmplY3QsIEV2ZW50RW1pdHRlciwgUExBVEZPUk1fSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1TZXJ2ZXIsIERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge1xuICBMb3R0aWVQbGF5ZXIsXG4gIExvdHRpZU9wdGlvbnMsXG4gIEFuaW1hdGlvbkl0ZW0sXG4gIEFuaW1hdGlvbk9wdGlvbnMsXG4gIEFuaW1hdGlvbkNvbmZpZ1dpdGhEYXRhLFxuICBBbmltYXRpb25Db25maWdXaXRoUGF0aCxcbiAgSVNfU0FGQVJJLFxuICBMT1RUSUVfT1BUSU9OUyxcbiAgQU5JTUFUSU9OX0NBQ0hFXG59IGZyb20gJy4vc3ltYm9scyc7XG5pbXBvcnQge1xuICBhd2FpdENvbmZpZ0FuZENhY2hlLFxuICBzZXRQbGF5ZXJMb2NhdGlvbkhyZWYsXG4gIG1lcmdlT3B0aW9uc1dpdGhEZWZhdWx0LFxuICBzdHJlYW1pZnlQbGF5ZXJPckxvYWRlclxufSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IEJhc2VEaXJlY3RpdmUgfSBmcm9tICcuL2Jhc2UuZGlyZWN0aXZlJztcbmltcG9ydCB7IEFuaW1hdGlvbkNhY2hlIH0gZnJvbSAnLi9hbmltYXRpb24tY2FjaGUnO1xuaW1wb3J0IHsgTG90dGllRXZlbnRzRmFjYWRlIH0gZnJvbSAnLi9ldmVudHMtZmFjYWRlJztcblxuLy8gVGhpcyBoYXMgdG8gYmUgZHluYW1pYyBhcyBgRG9jdW1lbnRgIGludGVyZmFjZSBpcyBub3Rcbi8vIGFjY2VwdGVkIGJ5IHRoZSBuZ2MgY29tcGlsZXJcbi8vIEBkeW5hbWljXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQW5pbWF0aW9uTG9hZGVyIHtcbiAgcHJpdmF0ZSBwbGF5ZXIkID0gc3RyZWFtaWZ5UGxheWVyT3JMb2FkZXIodGhpcy5vcHRpb25zLnBsYXllcik7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSxcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IHN0cmluZyxcbiAgICBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvY3VtZW50OiBEb2N1bWVudCxcbiAgICBASW5qZWN0KElTX1NBRkFSSSkgcHJpdmF0ZSBpc1NhZmFyaTogYm9vbGVhbixcbiAgICBASW5qZWN0KExPVFRJRV9PUFRJT05TKSBwcml2YXRlIG9wdGlvbnM6IExvdHRpZU9wdGlvbnMsXG4gICAgQEluamVjdChBTklNQVRJT05fQ0FDSEUpIHByaXZhdGUgYW5pbWF0aW9uQ2FjaGU6IEFuaW1hdGlvbkNhY2hlIHwgbnVsbFxuICApIHt9XG5cbiAgcmVzb2x2ZUxvYWRlckFuZExvYWRBbmltYXRpb24oXG4gICAgb3B0aW9uczogQW5pbWF0aW9uT3B0aW9ucyB8IG51bGwsXG4gICAgY29udGFpbmVyOiBIVE1MRWxlbWVudCxcbiAgICBldmVudHNGYWNhZGU6IExvdHRpZUV2ZW50c0ZhY2FkZSxcbiAgICBhbmltYXRpb25DcmVhdGVkOiBFdmVudEVtaXR0ZXI8QW5pbWF0aW9uSXRlbT4sXG4gICAgaW5zdGFuY2U6IEJhc2VEaXJlY3RpdmUsXG4gICAgZGVzdHJveSQ6IFN1YmplY3Q8dm9pZD5cbiAgKSB7XG4gICAgaWYgKGlzUGxhdGZvcm1TZXJ2ZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucGxheWVyJC5waXBlKHRha2VVbnRpbChkZXN0cm95JCkpLnN1YnNjcmliZShwbGF5ZXIgPT4ge1xuICAgICAgY29uc3QgbWVyZ2VkT3B0aW9ucyA9IG1lcmdlT3B0aW9uc1dpdGhEZWZhdWx0KG9wdGlvbnMsIGNvbnRhaW5lciwgdGhpcy5hbmltYXRpb25DYWNoZSk7XG4gICAgICB0aGlzLmxvYWRBbmltYXRpb24ocGxheWVyLCBtZXJnZWRPcHRpb25zLCBldmVudHNGYWNhZGUsIGFuaW1hdGlvbkNyZWF0ZWQsIGluc3RhbmNlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgbG9hZEFuaW1hdGlvbihcbiAgICBwbGF5ZXI6IExvdHRpZVBsYXllcixcbiAgICBvcHRpb25zOiBBbmltYXRpb25Db25maWdXaXRoRGF0YSB8IEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoLFxuICAgIGV2ZW50c0ZhY2FkZTogTG90dGllRXZlbnRzRmFjYWRlLFxuICAgIGFuaW1hdGlvbkNyZWF0ZWQ6IEV2ZW50RW1pdHRlcjxBbmltYXRpb25JdGVtPixcbiAgICBpbnN0YW5jZTogQmFzZURpcmVjdGl2ZVxuICApOiB2b2lkIHtcbiAgICBzZXRQbGF5ZXJMb2NhdGlvbkhyZWYocGxheWVyLCB0aGlzLmRvY3VtZW50LmxvY2F0aW9uLmhyZWYsIHRoaXMuaXNTYWZhcmkpO1xuICAgIGNvbnN0IGFuaW1hdGlvbkl0ZW0gPSB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiBwbGF5ZXIubG9hZEFuaW1hdGlvbihvcHRpb25zKSk7XG4gICAgYXdhaXRDb25maWdBbmRDYWNoZSh0aGlzLmFuaW1hdGlvbkNhY2hlLCBvcHRpb25zLCBhbmltYXRpb25JdGVtKTtcbiAgICAvLyBEaXNwYXRjaCBgYW5pbWF0aW9uQ3JlYXRlZGAgZXZlbnQgYWZ0ZXIgYW5pbWF0aW9uIGlzIGxvYWRlZCBzdWNjZXNzZnVsbHlcbiAgICBhbmltYXRpb25DcmVhdGVkLmVtaXQoYW5pbWF0aW9uSXRlbSk7XG4gICAgZXZlbnRzRmFjYWRlLmFkZEV2ZW50TGlzdGVuZXJzKGluc3RhbmNlLCBhbmltYXRpb25JdGVtKTtcbiAgfVxufVxuIl19