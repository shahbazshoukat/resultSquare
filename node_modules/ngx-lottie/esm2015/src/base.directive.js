/**
 * @fileoverview added by tsickle
 * Generated from: src/base.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformServer } from '@angular/common';
import { Subject } from 'rxjs';
import { AnimationLoader } from './animation-loader';
export class BaseDirective {
    /**
     * @param {?} platformId
     * @param {?} animationLoader
     */
    constructor(platformId, animationLoader) {
        this.platformId = platformId;
        this.animationLoader = animationLoader;
        this.options = null;
        this.containerClass = null;
        this.styles = null;
        this.width = null;
        this.height = null;
        /**
         * `animationCreated` is dispatched after calling `loadAnimation`
         */
        this.animationCreated = new EventEmitter();
        /**
         * `complete` is dispatched after completing the last frame
         */
        this.complete = new EventEmitter();
        /**
         * `loopComplete` is dispatched after completing frame loop
         */
        this.loopComplete = new EventEmitter();
        /**
         * `enterFrame` is dispatched after entering the new frame
         */
        this.enterFrame = new EventEmitter();
        /**
         * `segmentStart` is dispatched when the new segment is adjusted
         */
        this.segmentStart = new EventEmitter();
        /**
         * Original event name is `config_ready`. `config_ready` is dispatched
         * after the needed renderer is configured
         */
        this.configReady = new EventEmitter();
        /**
         * Original event name is `data_ready`. `data_ready` is dispatched
         * when all parts of the animation have been loaded
         */
        this.dataReady = new EventEmitter();
        /**
         * Original event name is `DOMLoaded`. `DOMLoaded` is dispatched
         * when elements have been added to the DOM
         */
        this.domLoaded = new EventEmitter();
        /**
         * `destroy` will be dispatched in the `ngOnDestroy` hook of the service,
         * it's useful for releasing resources
         */
        this.destroy = new EventEmitter();
        /**
         * `error` will be dispatched if the lottie player could not render
         * some frame or parse config
         */
        this.error = new EventEmitter();
        this.destroy$ = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * @protected
     * @return {?}
     */
    setWidthAndHeight() {
        this.width = this.width || '100%';
        this.height = this.height || '100%';
    }
    /**
     * @protected
     * @param {?} container
     * @param {?} eventsFacade
     * @param {?} instance
     * @return {?}
     */
    loadAnimation(container, eventsFacade, instance) {
        if (isPlatformServer(this.platformId)) {
            return;
        }
        this.animationLoader.resolveLoaderAndLoadAnimation(this.options, container, eventsFacade, this.animationCreated, instance, this.destroy$);
    }
}
BaseDirective.decorators = [
    { type: Directive, args: [{ selector: '[lottie]' },] }
];
/** @nocollapse */
BaseDirective.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: AnimationLoader }
];
BaseDirective.propDecorators = {
    options: [{ type: Input }],
    containerClass: [{ type: Input }],
    styles: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    animationCreated: [{ type: Output }],
    complete: [{ type: Output }],
    loopComplete: [{ type: Output }],
    enterFrame: [{ type: Output }],
    segmentStart: [{ type: Output }],
    configReady: [{ type: Output }],
    dataReady: [{ type: Output }],
    domLoaded: [{ type: Output }],
    destroy: [{ type: Output }],
    error: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    BaseDirective.prototype.options;
    /** @type {?} */
    BaseDirective.prototype.containerClass;
    /** @type {?} */
    BaseDirective.prototype.styles;
    /** @type {?} */
    BaseDirective.prototype.width;
    /** @type {?} */
    BaseDirective.prototype.height;
    /**
     * `animationCreated` is dispatched after calling `loadAnimation`
     * @type {?}
     */
    BaseDirective.prototype.animationCreated;
    /**
     * `complete` is dispatched after completing the last frame
     * @type {?}
     */
    BaseDirective.prototype.complete;
    /**
     * `loopComplete` is dispatched after completing frame loop
     * @type {?}
     */
    BaseDirective.prototype.loopComplete;
    /**
     * `enterFrame` is dispatched after entering the new frame
     * @type {?}
     */
    BaseDirective.prototype.enterFrame;
    /**
     * `segmentStart` is dispatched when the new segment is adjusted
     * @type {?}
     */
    BaseDirective.prototype.segmentStart;
    /**
     * Original event name is `config_ready`. `config_ready` is dispatched
     * after the needed renderer is configured
     * @type {?}
     */
    BaseDirective.prototype.configReady;
    /**
     * Original event name is `data_ready`. `data_ready` is dispatched
     * when all parts of the animation have been loaded
     * @type {?}
     */
    BaseDirective.prototype.dataReady;
    /**
     * Original event name is `DOMLoaded`. `DOMLoaded` is dispatched
     * when elements have been added to the DOM
     * @type {?}
     */
    BaseDirective.prototype.domLoaded;
    /**
     * `destroy` will be dispatched in the `ngOnDestroy` hook of the service,
     * it's useful for releasing resources
     * @type {?}
     */
    BaseDirective.prototype.destroy;
    /**
     * `error` will be dispatched if the lottie player could not render
     * some frame or parse config
     * @type {?}
     */
    BaseDirective.prototype.error;
    /**
     * @type {?}
     * @private
     */
    BaseDirective.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    BaseDirective.prototype.platformId;
    /**
     * @type {?}
     * @private
     */
    BaseDirective.prototype.animationLoader;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtbG90dGllLyIsInNvdXJjZXMiOlsic3JjL2Jhc2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWixNQUFNLEVBQ04sV0FBVyxFQUVaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRW5ELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFhL0IsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBSXJELE1BQU0sT0FBTyxhQUFhOzs7OztJQW9FeEIsWUFDK0IsVUFBa0IsRUFDdkMsZUFBZ0M7UUFEWCxlQUFVLEdBQVYsVUFBVSxDQUFRO1FBQ3ZDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQXJFakMsWUFBTyxHQUE0QixJQUFJLENBQUM7UUFFeEMsbUJBQWMsR0FBa0IsSUFBSSxDQUFDO1FBRXJDLFdBQU0sR0FBd0MsSUFBSSxDQUFDO1FBRW5ELFVBQUssR0FBa0IsSUFBSSxDQUFDO1FBRTVCLFdBQU0sR0FBa0IsSUFBSSxDQUFDOzs7O1FBSzVCLHFCQUFnQixHQUFHLElBQUksWUFBWSxFQUFpQixDQUFDOzs7O1FBS3JELGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBbUIsQ0FBQzs7OztRQUsvQyxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUF1QixDQUFDOzs7O1FBS3ZELGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBcUIsQ0FBQzs7OztRQUtuRCxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUF1QixDQUFDOzs7OztRQU12RCxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7Ozs7O1FBTXZDLGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDOzs7OztRQU1yQyxjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQzs7Ozs7UUFNckMsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFrQixDQUFDOzs7OztRQU03QyxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQWdELENBQUM7UUFFM0UsYUFBUSxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7SUFLcEMsQ0FBQzs7OztJQUVKLFdBQVc7UUFDVCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDM0IsQ0FBQzs7Ozs7SUFFUyxpQkFBaUI7UUFDekIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQztRQUNsQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDO0lBQ3RDLENBQUM7Ozs7Ozs7O0lBRVMsYUFBYSxDQUNyQixTQUEwQyxFQUMxQyxZQUFnQyxFQUNoQyxRQUF1QjtRQUV2QixJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNyQyxPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsZUFBZSxDQUFDLDZCQUE2QixDQUNoRCxJQUFJLENBQUMsT0FBTyxFQUNaLFNBQVMsRUFDVCxZQUFZLEVBQ1osSUFBSSxDQUFDLGdCQUFnQixFQUNyQixRQUFRLEVBQ1IsSUFBSSxDQUFDLFFBQVEsQ0FDZCxDQUFDO0lBQ0osQ0FBQzs7O1lBckdGLFNBQVMsU0FBQyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUU7Ozs7eUNBc0U5QixNQUFNLFNBQUMsV0FBVztZQXpFZCxlQUFlOzs7c0JBS3JCLEtBQUs7NkJBRUwsS0FBSztxQkFFTCxLQUFLO29CQUVMLEtBQUs7cUJBRUwsS0FBSzsrQkFLTCxNQUFNO3VCQUtOLE1BQU07MkJBS04sTUFBTTt5QkFLTixNQUFNOzJCQUtOLE1BQU07MEJBTU4sTUFBTTt3QkFNTixNQUFNO3dCQU1OLE1BQU07c0JBTU4sTUFBTTtvQkFNTixNQUFNOzs7O0lBL0RQLGdDQUFpRDs7SUFFakQsdUNBQThDOztJQUU5QywrQkFBNEQ7O0lBRTVELDhCQUFxQzs7SUFFckMsK0JBQXNDOzs7OztJQUt0Qyx5Q0FBK0Q7Ozs7O0lBSy9ELGlDQUF5RDs7Ozs7SUFLekQscUNBQWlFOzs7OztJQUtqRSxtQ0FBNkQ7Ozs7O0lBSzdELHFDQUFpRTs7Ozs7O0lBTWpFLG9DQUFpRDs7Ozs7O0lBTWpELGtDQUErQzs7Ozs7O0lBTS9DLGtDQUErQzs7Ozs7O0lBTS9DLGdDQUF1RDs7Ozs7O0lBTXZELDhCQUFtRjs7Ozs7SUFFbkYsaUNBQXVDOzs7OztJQUdyQyxtQ0FBK0M7Ozs7O0lBQy9DLHdDQUF3QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbmplY3QsXG4gIFBMQVRGT1JNX0lELFxuICBPbkRlc3Ryb3lcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtU2VydmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQge1xuICBBbmltYXRpb25PcHRpb25zLFxuICBCTUNvbXBsZXRlRXZlbnQsXG4gIEJNQ29tcGxldGVMb29wRXZlbnQsXG4gIEJNRW50ZXJGcmFtZUV2ZW50LFxuICBCTVNlZ21lbnRTdGFydEV2ZW50LFxuICBCTURlc3Ryb3lFdmVudCxcbiAgQk1SZW5kZXJGcmFtZUVycm9yRXZlbnQsXG4gIEJNQ29uZmlnRXJyb3JFdmVudCxcbiAgQW5pbWF0aW9uSXRlbVxufSBmcm9tICcuL3N5bWJvbHMnO1xuaW1wb3J0IHsgQW5pbWF0aW9uTG9hZGVyIH0gZnJvbSAnLi9hbmltYXRpb24tbG9hZGVyJztcbmltcG9ydCB7IExvdHRpZUV2ZW50c0ZhY2FkZSB9IGZyb20gJy4vZXZlbnRzLWZhY2FkZSc7XG5cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tsb3R0aWVdJyB9KVxuZXhwb3J0IGNsYXNzIEJhc2VEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBASW5wdXQoKSBvcHRpb25zOiBBbmltYXRpb25PcHRpb25zIHwgbnVsbCA9IG51bGw7XG5cbiAgQElucHV0KCkgY29udGFpbmVyQ2xhc3M6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXG4gIEBJbnB1dCgpIHN0eWxlczogUGFydGlhbDxDU1NTdHlsZURlY2xhcmF0aW9uPiB8IG51bGwgPSBudWxsO1xuXG4gIEBJbnB1dCgpIHdpZHRoOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICBASW5wdXQoKSBoZWlnaHQ6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBgYW5pbWF0aW9uQ3JlYXRlZGAgaXMgZGlzcGF0Y2hlZCBhZnRlciBjYWxsaW5nIGBsb2FkQW5pbWF0aW9uYFxuICAgKi9cbiAgQE91dHB1dCgpIGFuaW1hdGlvbkNyZWF0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPEFuaW1hdGlvbkl0ZW0+KCk7XG5cbiAgLyoqXG4gICAqIGBjb21wbGV0ZWAgaXMgZGlzcGF0Y2hlZCBhZnRlciBjb21wbGV0aW5nIHRoZSBsYXN0IGZyYW1lXG4gICAqL1xuICBAT3V0cHV0KCkgY29tcGxldGUgPSBuZXcgRXZlbnRFbWl0dGVyPEJNQ29tcGxldGVFdmVudD4oKTtcblxuICAvKipcbiAgICogYGxvb3BDb21wbGV0ZWAgaXMgZGlzcGF0Y2hlZCBhZnRlciBjb21wbGV0aW5nIGZyYW1lIGxvb3BcbiAgICovXG4gIEBPdXRwdXQoKSBsb29wQ29tcGxldGUgPSBuZXcgRXZlbnRFbWl0dGVyPEJNQ29tcGxldGVMb29wRXZlbnQ+KCk7XG5cbiAgLyoqXG4gICAqIGBlbnRlckZyYW1lYCBpcyBkaXNwYXRjaGVkIGFmdGVyIGVudGVyaW5nIHRoZSBuZXcgZnJhbWVcbiAgICovXG4gIEBPdXRwdXQoKSBlbnRlckZyYW1lID0gbmV3IEV2ZW50RW1pdHRlcjxCTUVudGVyRnJhbWVFdmVudD4oKTtcblxuICAvKipcbiAgICogYHNlZ21lbnRTdGFydGAgaXMgZGlzcGF0Y2hlZCB3aGVuIHRoZSBuZXcgc2VnbWVudCBpcyBhZGp1c3RlZFxuICAgKi9cbiAgQE91dHB1dCgpIHNlZ21lbnRTdGFydCA9IG5ldyBFdmVudEVtaXR0ZXI8Qk1TZWdtZW50U3RhcnRFdmVudD4oKTtcblxuICAvKipcbiAgICogT3JpZ2luYWwgZXZlbnQgbmFtZSBpcyBgY29uZmlnX3JlYWR5YC4gYGNvbmZpZ19yZWFkeWAgaXMgZGlzcGF0Y2hlZFxuICAgKiBhZnRlciB0aGUgbmVlZGVkIHJlbmRlcmVyIGlzIGNvbmZpZ3VyZWRcbiAgICovXG4gIEBPdXRwdXQoKSBjb25maWdSZWFkeSA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICAvKipcbiAgICogT3JpZ2luYWwgZXZlbnQgbmFtZSBpcyBgZGF0YV9yZWFkeWAuIGBkYXRhX3JlYWR5YCBpcyBkaXNwYXRjaGVkXG4gICAqIHdoZW4gYWxsIHBhcnRzIG9mIHRoZSBhbmltYXRpb24gaGF2ZSBiZWVuIGxvYWRlZFxuICAgKi9cbiAgQE91dHB1dCgpIGRhdGFSZWFkeSA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICAvKipcbiAgICogT3JpZ2luYWwgZXZlbnQgbmFtZSBpcyBgRE9NTG9hZGVkYC4gYERPTUxvYWRlZGAgaXMgZGlzcGF0Y2hlZFxuICAgKiB3aGVuIGVsZW1lbnRzIGhhdmUgYmVlbiBhZGRlZCB0byB0aGUgRE9NXG4gICAqL1xuICBAT3V0cHV0KCkgZG9tTG9hZGVkID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gIC8qKlxuICAgKiBgZGVzdHJveWAgd2lsbCBiZSBkaXNwYXRjaGVkIGluIHRoZSBgbmdPbkRlc3Ryb3lgIGhvb2sgb2YgdGhlIHNlcnZpY2UsXG4gICAqIGl0J3MgdXNlZnVsIGZvciByZWxlYXNpbmcgcmVzb3VyY2VzXG4gICAqL1xuICBAT3V0cHV0KCkgZGVzdHJveSA9IG5ldyBFdmVudEVtaXR0ZXI8Qk1EZXN0cm95RXZlbnQ+KCk7XG5cbiAgLyoqXG4gICAqIGBlcnJvcmAgd2lsbCBiZSBkaXNwYXRjaGVkIGlmIHRoZSBsb3R0aWUgcGxheWVyIGNvdWxkIG5vdCByZW5kZXJcbiAgICogc29tZSBmcmFtZSBvciBwYXJzZSBjb25maWdcbiAgICovXG4gIEBPdXRwdXQoKSBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXI8Qk1SZW5kZXJGcmFtZUVycm9yRXZlbnQgfCBCTUNvbmZpZ0Vycm9yRXZlbnQ+KCk7XG5cbiAgcHJpdmF0ZSBkZXN0cm95JCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybUlkOiBzdHJpbmcsXG4gICAgcHJpdmF0ZSBhbmltYXRpb25Mb2FkZXI6IEFuaW1hdGlvbkxvYWRlclxuICApIHt9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5kZXN0cm95JC5uZXh0KCk7XG4gICAgdGhpcy5kZXN0cm95JC5jb21wbGV0ZSgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHNldFdpZHRoQW5kSGVpZ2h0KCk6IHZvaWQge1xuICAgIHRoaXMud2lkdGggPSB0aGlzLndpZHRoIHx8ICcxMDAlJztcbiAgICB0aGlzLmhlaWdodCA9IHRoaXMuaGVpZ2h0IHx8ICcxMDAlJztcbiAgfVxuXG4gIHByb3RlY3RlZCBsb2FkQW5pbWF0aW9uKFxuICAgIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQgfCBIVE1MQ2FudmFzRWxlbWVudCxcbiAgICBldmVudHNGYWNhZGU6IExvdHRpZUV2ZW50c0ZhY2FkZSxcbiAgICBpbnN0YW5jZTogQmFzZURpcmVjdGl2ZVxuICApOiB2b2lkIHtcbiAgICBpZiAoaXNQbGF0Zm9ybVNlcnZlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5hbmltYXRpb25Mb2FkZXIucmVzb2x2ZUxvYWRlckFuZExvYWRBbmltYXRpb24oXG4gICAgICB0aGlzLm9wdGlvbnMsXG4gICAgICBjb250YWluZXIsXG4gICAgICBldmVudHNGYWNhZGUsXG4gICAgICB0aGlzLmFuaW1hdGlvbkNyZWF0ZWQsXG4gICAgICBpbnN0YW5jZSxcbiAgICAgIHRoaXMuZGVzdHJveSRcbiAgICApO1xuICB9XG59XG4iXX0=