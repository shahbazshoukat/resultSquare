/**
 * @fileoverview added by tsickle
 * Generated from: src/lottie.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, Inject, ElementRef, ViewChild, Self, Renderer2, PLATFORM_ID } from '@angular/core';
import { BaseDirective } from './base.directive';
import { AnimationLoader } from './animation-loader';
import { LottieEventsFacade } from './events-facade';
export class LottieComponent extends BaseDirective {
    /**
     * @param {?} renderer
     * @param {?} platformId
     * @param {?} eventsFacade
     * @param {?} animationLoader
     */
    constructor(renderer, platformId, eventsFacade, animationLoader) {
        super(platformId, animationLoader);
        this.renderer = renderer;
        this.eventsFacade = eventsFacade;
        this.container = (/** @type {?} */ (null));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const containerClass = changes.containerClass;
        if (containerClass === undefined || typeof containerClass.currentValue !== 'string') {
            return;
        }
        this.renderer.addClass(this.container.nativeElement, containerClass.currentValue);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.setWidthAndHeight();
        super.loadAnimation(this.container.nativeElement, this.eventsFacade, this);
    }
}
LottieComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-lottie',
                template: `
    <div #container [style.width]="width" [style.height]="height" [ngStyle]="styles"></div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [LottieEventsFacade]
            }] }
];
/** @nocollapse */
LottieComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: LottieEventsFacade, decorators: [{ type: Self }] },
    { type: AnimationLoader }
];
LottieComponent.propDecorators = {
    container: [{ type: ViewChild, args: ['container', { static: true },] }]
};
if (false) {
    /** @type {?} */
    LottieComponent.prototype.container;
    /**
     * @type {?}
     * @private
     */
    LottieComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    LottieComponent.prototype.eventsFacade;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG90dGllLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1sb3R0aWUvIiwic291cmNlcyI6WyJzcmMvbG90dGllLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsdUJBQXVCLEVBRXZCLE1BQU0sRUFDTixVQUFVLEVBQ1YsU0FBUyxFQUNULElBQUksRUFHSixTQUFTLEVBQ1QsV0FBVyxFQUNaLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFVckQsTUFBTSxPQUFPLGVBQWdCLFNBQVEsYUFBYTs7Ozs7OztJQUdoRCxZQUNVLFFBQW1CLEVBQ04sVUFBa0IsRUFDdkIsWUFBZ0MsRUFDaEQsZUFBZ0M7UUFFaEMsS0FBSyxDQUFDLFVBQVUsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUwzQixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBRVgsaUJBQVksR0FBWixZQUFZLENBQW9CO1FBTFIsY0FBUyxHQUE0QixtQkFBQSxJQUFJLEVBQUMsQ0FBQztJQVNyRixDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxPQUFzQjs7Y0FDMUIsY0FBYyxHQUFHLE9BQU8sQ0FBQyxjQUFjO1FBRTdDLElBQUksY0FBYyxLQUFLLFNBQVMsSUFBSSxPQUFPLGNBQWMsQ0FBQyxZQUFZLEtBQUssUUFBUSxFQUFFO1lBQ25GLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNwRixDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQzFCLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM3RSxDQUFDOzs7WUFqQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxXQUFXO2dCQUNyQixRQUFRLEVBQUU7O0dBRVQ7Z0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLFNBQVMsRUFBRSxDQUFDLGtCQUFrQixDQUFDO2FBQ2hDOzs7O1lBZkMsU0FBUzt5Q0FxQk4sTUFBTSxTQUFDLFdBQVc7WUFmZCxrQkFBa0IsdUJBZ0J0QixJQUFJO1lBakJBLGVBQWU7Ozt3QkFZckIsU0FBUyxTQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7Ozs7SUFBeEMsb0NBQXFGOzs7OztJQUduRixtQ0FBMkI7Ozs7O0lBRTNCLHVDQUFnRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIE9uSW5pdCxcbiAgSW5qZWN0LFxuICBFbGVtZW50UmVmLFxuICBWaWV3Q2hpbGQsXG4gIFNlbGYsXG4gIE9uQ2hhbmdlcyxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgUmVuZGVyZXIyLFxuICBQTEFURk9STV9JRFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQmFzZURpcmVjdGl2ZSB9IGZyb20gJy4vYmFzZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQW5pbWF0aW9uTG9hZGVyIH0gZnJvbSAnLi9hbmltYXRpb24tbG9hZGVyJztcbmltcG9ydCB7IExvdHRpZUV2ZW50c0ZhY2FkZSB9IGZyb20gJy4vZXZlbnRzLWZhY2FkZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25nLWxvdHRpZScsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiAjY29udGFpbmVyIFtzdHlsZS53aWR0aF09XCJ3aWR0aFwiIFtzdHlsZS5oZWlnaHRdPVwiaGVpZ2h0XCIgW25nU3R5bGVdPVwic3R5bGVzXCI+PC9kaXY+XG4gIGAsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcm92aWRlcnM6IFtMb3R0aWVFdmVudHNGYWNhZGVdXG59KVxuZXhwb3J0IGNsYXNzIExvdHRpZUNvbXBvbmVudCBleHRlbmRzIEJhc2VEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uSW5pdCB7XG4gIEBWaWV3Q2hpbGQoJ2NvbnRhaW5lcicsIHsgc3RhdGljOiB0cnVlIH0pIGNvbnRhaW5lcjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4gPSBudWxsITtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgQEluamVjdChQTEFURk9STV9JRCkgcGxhdGZvcm1JZDogc3RyaW5nLFxuICAgIEBTZWxmKCkgcHJpdmF0ZSBldmVudHNGYWNhZGU6IExvdHRpZUV2ZW50c0ZhY2FkZSxcbiAgICBhbmltYXRpb25Mb2FkZXI6IEFuaW1hdGlvbkxvYWRlclxuICApIHtcbiAgICBzdXBlcihwbGF0Zm9ybUlkLCBhbmltYXRpb25Mb2FkZXIpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGNvbnN0IGNvbnRhaW5lckNsYXNzID0gY2hhbmdlcy5jb250YWluZXJDbGFzcztcblxuICAgIGlmIChjb250YWluZXJDbGFzcyA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBjb250YWluZXJDbGFzcy5jdXJyZW50VmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmNvbnRhaW5lci5uYXRpdmVFbGVtZW50LCBjb250YWluZXJDbGFzcy5jdXJyZW50VmFsdWUpO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgc3VwZXIuc2V0V2lkdGhBbmRIZWlnaHQoKTtcbiAgICBzdXBlci5sb2FkQW5pbWF0aW9uKHRoaXMuY29udGFpbmVyLm5hdGl2ZUVsZW1lbnQsIHRoaXMuZXZlbnRzRmFjYWRlLCB0aGlzKTtcbiAgfVxufVxuIl19