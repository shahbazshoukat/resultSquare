/**
 * @fileoverview added by tsickle
 * Generated from: internals.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { join } from 'path';
import { makeStateKey } from '@angular/platform-browser';
import { transformAnimationFilenameToKey } from 'ngx-lottie';
import { readFileWithAnimationData } from './utils';
/**
 * @param {?} transferState
 * @param {?} animations
 * @param {?} pathsToAnimations
 * @return {?}
 */
function readAndTransferAnimationData(transferState, animations, pathsToAnimations) {
    /** @type {?} */
    const sources = [];
    for (let i = 0, length = animations.length; i < length; i++) {
        /** @type {?} */
        const path = pathsToAnimations[i];
        /** @type {?} */
        const source = readFileWithAnimationData(path).then((/**
         * @param {?} animationData
         * @return {?}
         */
        animationData => {
            transferAnimationData(transferState, animations[i], animationData);
        }));
        sources.push(source);
    }
    return sources;
}
/**
 * @param {?} state
 * @param {?} animation
 * @param {?} animationData
 * @return {?}
 */
function transferAnimationData(state, animation, animationData) {
    animation = transformAnimationFilenameToKey(animation);
    /** @type {?} */
    const key = makeStateKey(animation);
    state.set(key, JSON.parse(animationData));
}
/**
 * @param {?} options
 * @param {?} state
 * @return {?}
 */
export function appInitializerFactory(options, state) {
    /** @type {?} */
    const pathsToAnimations = resolveLottiePaths(options);
    /** @type {?} */
    const sources = readAndTransferAnimationData(state, options.preloadAnimations.animations, pathsToAnimations);
    return (/**
     * @return {?}
     */
    () => Promise.all(sources));
}
/**
 * @param {?} __0
 * @return {?}
 */
export function resolveLottiePaths({ preloadAnimations }) {
    const { folder, animations } = preloadAnimations;
    /** @type {?} */
    const path = join(process.cwd(), folder);
    return animations.map((/**
     * @param {?} animation
     * @return {?}
     */
    animation => join(path, animation)));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJuYWxzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWxvdHRpZS9zZXJ2ZXIvIiwic291cmNlcyI6WyJpbnRlcm5hbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzVCLE9BQU8sRUFBaUIsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFeEUsT0FBTyxFQUFxQiwrQkFBK0IsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUVoRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxTQUFTLENBQUM7Ozs7Ozs7QUFHcEQsU0FBUyw0QkFBNEIsQ0FDbkMsYUFBNEIsRUFDNUIsVUFBK0IsRUFDL0IsaUJBQW9DOztVQUU5QixPQUFPLEdBQW9CLEVBQUU7SUFFbkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTs7Y0FDckQsSUFBSSxHQUFHLGlCQUFpQixDQUFDLENBQUMsQ0FBQzs7Y0FFM0IsTUFBTSxHQUFHLHlCQUF5QixDQUFDLElBQUksQ0FBQyxDQUFDLElBQUk7Ozs7UUFBQyxhQUFhLENBQUMsRUFBRTtZQUNsRSxxQkFBcUIsQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3JFLENBQUMsRUFBQztRQUVGLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDdEI7SUFFRCxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDOzs7Ozs7O0FBRUQsU0FBUyxxQkFBcUIsQ0FDNUIsS0FBb0IsRUFDcEIsU0FBNEIsRUFDNUIsYUFBNEI7SUFFNUIsU0FBUyxHQUFHLCtCQUErQixDQUFDLFNBQVMsQ0FBQyxDQUFDOztVQUNqRCxHQUFHLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQztJQUNuQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7QUFDNUMsQ0FBQzs7Ozs7O0FBRUQsTUFBTSxVQUFVLHFCQUFxQixDQUFDLE9BQTRCLEVBQUUsS0FBb0I7O1VBQ2hGLGlCQUFpQixHQUFHLGtCQUFrQixDQUFDLE9BQU8sQ0FBQzs7VUFDL0MsT0FBTyxHQUFHLDRCQUE0QixDQUMxQyxLQUFLLEVBQ0wsT0FBTyxDQUFDLGlCQUFpQixDQUFDLFVBQVUsRUFDcEMsaUJBQWlCLENBQ2xCO0lBRUQ7OztJQUFPLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUM7QUFDcEMsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsa0JBQWtCLENBQUMsRUFBRSxpQkFBaUIsRUFBdUI7VUFDckUsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLEdBQUcsaUJBQWlCOztVQUMxQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLENBQUM7SUFFeEMsT0FBTyxVQUFVLENBQUMsR0FBRzs7OztJQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsRUFBQyxDQUFDO0FBQzVELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBUcmFuc2ZlclN0YXRlLCBtYWtlU3RhdGVLZXkgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcblxuaW1wb3J0IHsgQW5pbWF0aW9uRmlsZW5hbWUsIHRyYW5zZm9ybUFuaW1hdGlvbkZpbGVuYW1lVG9LZXkgfSBmcm9tICduZ3gtbG90dGllJztcblxuaW1wb3J0IHsgcmVhZEZpbGVXaXRoQW5pbWF0aW9uRGF0YSB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgTG90dGllU2VydmVyT3B0aW9ucywgUGF0aFRvQW5pbWF0aW9uLCBBbmltYXRpb25EYXRhIH0gZnJvbSAnLi9zeW1ib2xzJztcblxuZnVuY3Rpb24gcmVhZEFuZFRyYW5zZmVyQW5pbWF0aW9uRGF0YShcbiAgdHJhbnNmZXJTdGF0ZTogVHJhbnNmZXJTdGF0ZSxcbiAgYW5pbWF0aW9uczogQW5pbWF0aW9uRmlsZW5hbWVbXSxcbiAgcGF0aHNUb0FuaW1hdGlvbnM6IFBhdGhUb0FuaW1hdGlvbltdXG4pOiBQcm9taXNlPHZvaWQ+W10ge1xuICBjb25zdCBzb3VyY2VzOiBQcm9taXNlPHZvaWQ+W10gPSBbXTtcblxuICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gYW5pbWF0aW9ucy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHBhdGggPSBwYXRoc1RvQW5pbWF0aW9uc1tpXTtcblxuICAgIGNvbnN0IHNvdXJjZSA9IHJlYWRGaWxlV2l0aEFuaW1hdGlvbkRhdGEocGF0aCkudGhlbihhbmltYXRpb25EYXRhID0+IHtcbiAgICAgIHRyYW5zZmVyQW5pbWF0aW9uRGF0YSh0cmFuc2ZlclN0YXRlLCBhbmltYXRpb25zW2ldLCBhbmltYXRpb25EYXRhKTtcbiAgICB9KTtcblxuICAgIHNvdXJjZXMucHVzaChzb3VyY2UpO1xuICB9XG5cbiAgcmV0dXJuIHNvdXJjZXM7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZmVyQW5pbWF0aW9uRGF0YShcbiAgc3RhdGU6IFRyYW5zZmVyU3RhdGUsXG4gIGFuaW1hdGlvbjogQW5pbWF0aW9uRmlsZW5hbWUsXG4gIGFuaW1hdGlvbkRhdGE6IEFuaW1hdGlvbkRhdGFcbik6IHZvaWQge1xuICBhbmltYXRpb24gPSB0cmFuc2Zvcm1BbmltYXRpb25GaWxlbmFtZVRvS2V5KGFuaW1hdGlvbik7XG4gIGNvbnN0IGtleSA9IG1ha2VTdGF0ZUtleShhbmltYXRpb24pO1xuICBzdGF0ZS5zZXQoa2V5LCBKU09OLnBhcnNlKGFuaW1hdGlvbkRhdGEpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcEluaXRpYWxpemVyRmFjdG9yeShvcHRpb25zOiBMb3R0aWVTZXJ2ZXJPcHRpb25zLCBzdGF0ZTogVHJhbnNmZXJTdGF0ZSkge1xuICBjb25zdCBwYXRoc1RvQW5pbWF0aW9ucyA9IHJlc29sdmVMb3R0aWVQYXRocyhvcHRpb25zKTtcbiAgY29uc3Qgc291cmNlcyA9IHJlYWRBbmRUcmFuc2ZlckFuaW1hdGlvbkRhdGEoXG4gICAgc3RhdGUsXG4gICAgb3B0aW9ucy5wcmVsb2FkQW5pbWF0aW9ucy5hbmltYXRpb25zLFxuICAgIHBhdGhzVG9BbmltYXRpb25zXG4gICk7XG5cbiAgcmV0dXJuICgpID0+IFByb21pc2UuYWxsKHNvdXJjZXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUxvdHRpZVBhdGhzKHsgcHJlbG9hZEFuaW1hdGlvbnMgfTogTG90dGllU2VydmVyT3B0aW9ucyk6IFBhdGhUb0FuaW1hdGlvbltdIHtcbiAgY29uc3QgeyBmb2xkZXIsIGFuaW1hdGlvbnMgfSA9IHByZWxvYWRBbmltYXRpb25zO1xuICBjb25zdCBwYXRoID0gam9pbihwcm9jZXNzLmN3ZCgpLCBmb2xkZXIpO1xuXG4gIHJldHVybiBhbmltYXRpb25zLm1hcChhbmltYXRpb24gPT4gam9pbihwYXRoLCBhbmltYXRpb24pKTtcbn1cbiJdfQ==