{"version":3,"file":"ngx-lottie-server.js","sources":["ng://ngx-lottie/server/utils.ts","ng://ngx-lottie/server/internals.ts","ng://ngx-lottie/server/lottie-server.module.ts"],"sourcesContent":["import { readFile } from 'fs';\n\nimport { AnimationData } from './symbols';\n\nexport function readFileWithAnimationData(path: string) {\n  return new Promise<AnimationData>((resolve, reject) => {\n    readFile(path, (error, data) => {\n      if (error) {\n        return reject(error);\n      }\n\n      resolve(data.toString());\n    });\n  });\n}\n","import { join } from 'path';\nimport { TransferState, makeStateKey } from '@angular/platform-browser';\n\nimport { AnimationFilename, transformAnimationFilenameToKey } from 'ngx-lottie';\n\nimport { readFileWithAnimationData } from './utils';\nimport { LottieServerOptions, PathToAnimation, AnimationData } from './symbols';\n\nfunction readAndTransferAnimationData(\n  transferState: TransferState,\n  animations: AnimationFilename[],\n  pathsToAnimations: PathToAnimation[]\n): Promise<void>[] {\n  const sources: Promise<void>[] = [];\n\n  for (let i = 0, length = animations.length; i < length; i++) {\n    const path = pathsToAnimations[i];\n\n    const source = readFileWithAnimationData(path).then(animationData => {\n      transferAnimationData(transferState, animations[i], animationData);\n    });\n\n    sources.push(source);\n  }\n\n  return sources;\n}\n\nfunction transferAnimationData(\n  state: TransferState,\n  animation: AnimationFilename,\n  animationData: AnimationData\n): void {\n  animation = transformAnimationFilenameToKey(animation);\n  const key = makeStateKey(animation);\n  state.set(key, JSON.parse(animationData));\n}\n\nexport function appInitializerFactory(options: LottieServerOptions, state: TransferState) {\n  const pathsToAnimations = resolveLottiePaths(options);\n  const sources = readAndTransferAnimationData(\n    state,\n    options.preloadAnimations.animations,\n    pathsToAnimations\n  );\n\n  return () => Promise.all(sources);\n}\n\nexport function resolveLottiePaths({ preloadAnimations }: LottieServerOptions): PathToAnimation[] {\n  const { folder, animations } = preloadAnimations;\n  const path = join(process.cwd(), folder);\n\n  return animations.map(animation => join(path, animation));\n}\n","import { NgModule, ModuleWithProviders, InjectionToken, APP_INITIALIZER } from '@angular/core';\nimport { TransferState } from '@angular/platform-browser';\n\nimport { LottieServerOptions } from './symbols';\nimport { appInitializerFactory } from './internals';\n\nexport const LOTTIE_SERVER_OPTIONS = new InjectionToken<LottieServerOptions>('LottieServerOptions');\n\n@NgModule()\nexport class LottieServerModule {\n  static forRoot(options: LottieServerOptions): ModuleWithProviders<LottieServerModule> {\n    return {\n      ngModule: LottieServerModule,\n      providers: [\n        {\n          provide: LOTTIE_SERVER_OPTIONS,\n          useValue: options\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: appInitializerFactory,\n          multi: true,\n          deps: [LOTTIE_SERVER_OPTIONS, TransferState]\n        }\n      ]\n    };\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;;;;AAIA,SAAgB,yBAAyB,CAAC,IAAY;IACpD,OAAO,IAAI,OAAO;;;;;IAAgB,UAAC,OAAO,EAAE,MAAM;QAChD,QAAQ,CAAC,IAAI;;;;;QAAE,UAAC,KAAK,EAAE,IAAI;YACzB,IAAI,KAAK,EAAE;gBACT,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;aACtB;YAED,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;SAC1B,EAAC,CAAC;KACJ,EAAC,CAAC;CACJ;;;;;;;ACdD;;;;;;AAQA,SAAS,4BAA4B,CACnC,aAA4B,EAC5B,UAA+B,EAC/B,iBAAoC;;QAE9B,OAAO,GAAoB,EAAE;4BAE1B,CAAC,EAAM,QAAM;;YACd,IAAI,GAAG,iBAAiB,CAAC,CAAC,CAAC;;YAE3B,MAAM,GAAG,yBAAyB,CAAC,IAAI,CAAC,CAAC,IAAI;;;;QAAC,UAAA,aAAa;YAC/D,qBAAqB,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;SACpE,EAAC;QAEF,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;;IAPvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,QAAM,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,QAAM,EAAE,CAAC,EAAE;gBAAlD,CAAC,EAAM,QAAM;KAQrB;IAED,OAAO,OAAO,CAAC;CAChB;;;;;;;AAED,SAAS,qBAAqB,CAC5B,KAAoB,EACpB,SAA4B,EAC5B,aAA4B;IAE5B,SAAS,GAAG,+BAA+B,CAAC,SAAS,CAAC,CAAC;;QACjD,GAAG,GAAG,YAAY,CAAC,SAAS,CAAC;IACnC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC;CAC3C;;;;;;AAED,SAAgB,qBAAqB,CAAC,OAA4B,EAAE,KAAoB;;QAChF,iBAAiB,GAAG,kBAAkB,CAAC,OAAO,CAAC;;QAC/C,OAAO,GAAG,4BAA4B,CAC1C,KAAK,EACL,OAAO,CAAC,iBAAiB,CAAC,UAAU,EACpC,iBAAiB,CAClB;IAED;;;IAAO,cAAM,OAAA,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,GAAA,EAAC;CACnC;;;;;AAED,SAAgB,kBAAkB,CAAC,EAA0C;QAAxC,wCAAiB;IAC5C,IAAA,iCAAM,EAAE,yCAAU;;QACpB,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,MAAM,CAAC;IAExC,OAAO,UAAU,CAAC,GAAG;;;;IAAC,UAAA,SAAS,IAAI,OAAA,IAAI,CAAC,IAAI,EAAE,SAAS,CAAC,GAAA,EAAC,CAAC;CAC3D;;;;;;;ACtDD;AAMA,IAAa,qBAAqB,GAAG,IAAI,cAAc,CAAsB,qBAAqB,CAAC;AAEnG;IAAA;KAmBC;;;;;IAjBQ,0BAAO;;;;IAAd,UAAe,OAA4B;QACzC,OAAO;YACL,QAAQ,EAAE,kBAAkB;YAC5B,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,qBAAqB;oBAC9B,QAAQ,EAAE,OAAO;iBAClB;gBACD;oBACE,OAAO,EAAE,eAAe;oBACxB,UAAU,EAAE,qBAAqB;oBACjC,KAAK,EAAE,IAAI;oBACX,IAAI,EAAE,CAAC,qBAAqB,EAAE,aAAa,CAAC;iBAC7C;aACF;SACF,CAAC;KACH;;gBAlBF,QAAQ;;IAmBT,yBAAC;CAnBD;;;;;;;;;;;;;;;;"}