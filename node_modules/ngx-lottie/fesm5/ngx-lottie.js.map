{"version":3,"file":"ngx-lottie.js","sources":["ng://ngx-lottie/src/utils.ts","ng://ngx-lottie/src/symbols.ts","ng://ngx-lottie/src/animation-loader.ts","ng://ngx-lottie/src/base.directive.ts","ng://ngx-lottie/src/animation-cache.ts","ng://ngx-lottie/src/events-facade.ts","ng://ngx-lottie/src/lottie.directive.ts","ng://ngx-lottie/src/lottie.component.ts","ng://ngx-lottie/src/lottie.module.ts","ng://ngx-lottie/src/transfer-state.ts"],"sourcesContent":["import { from, throwError, of, Observable } from 'rxjs';\nimport { map, catchError, shareReplay } from 'rxjs/operators';\n\nimport {\n  LottiePlayer,\n  AnimationOptions,\n  AnimationFilename,\n  AnimationConfigWithData,\n  AnimationConfigWithPath,\n  AnimationItem,\n  LottiePlayerFactoryOrLoader\n} from './symbols';\nimport { AnimationCache } from './animation-cache';\n\nexport function transformAnimationFilenameToKey(animation: AnimationFilename): string {\n  return `animation-${animation.split('.json')[0]}`;\n}\n\nexport function setPlayerLocationHref(player: LottiePlayer, href: string, isSafari: boolean): void {\n  // This is a fix for the mask on Safari/iOS\n  // https://github.com/airbnb/lottie-web/issues/1198\n  if (isSafari) {\n    ((player as unknown) as { setLocationHref: (href: string) => void }).setLocationHref(href);\n  }\n}\n\nexport function mergeOptionsWithDefault(\n  options: AnimationOptions | null,\n  container: HTMLElement,\n  animationCache: AnimationCache | null\n): AnimationConfigWithData | AnimationConfigWithPath {\n  const merged: AnimationConfigWithData | AnimationConfigWithPath = Object.assign(\n    {\n      container,\n      renderer: 'svg',\n      loop: true,\n      autoplay: true\n    },\n    options\n  );\n\n  if (animationCache !== null) {\n    return animationCache.transformOptions(merged);\n  }\n\n  return merged;\n}\n\nexport function isSafariFactory(): boolean {\n  // This `try-catch` block will also handle server-side rendering\n  // as `navigator` is not accessable there\n  try {\n    const { vendor, userAgent } = navigator;\n    return (\n      vendor.indexOf('Apple') > -1 &&\n      userAgent.indexOf('CriOS') === -1 &&\n      userAgent.indexOf('FxiOS') === -1\n    );\n  } catch {\n    return false;\n  }\n}\n\nexport function isAnimationConfigWithData(\n  options: AnimationConfigWithPath | AnimationConfigWithData\n): options is AnimationConfigWithData {\n  const animationData = (options as AnimationConfigWithData).animationData;\n  return animationData !== null && typeof animationData === 'object';\n}\n\nexport function awaitConfigAndCache(\n  animationCache: AnimationCache | null,\n  options: AnimationConfigWithPath | AnimationConfigWithData,\n  animationItem: AnimationItem\n): void {\n  if (animationCache === null) {\n    return;\n  }\n\n  animationItem.addEventListener('config_ready', () => {\n    animationCache.set(options, animationItem);\n  });\n}\n\nexport function streamifyPlayerOrLoader(\n  player: LottiePlayerFactoryOrLoader\n): Observable<LottiePlayer> {\n  const playerOrLoader = player();\n\n  if (playerOrLoader instanceof Promise) {\n    return from(playerOrLoader).pipe(\n      map(module => module.default || module),\n      catchError(error => {\n        console.error(`\n          Could not retrieve the \"lottie-web\" player, did you provide\n          the \"player\" property correctly?\n          export function playerFactory() {\n            return import('lottie-web');\n          }\n          LottieModule.forRoot({ player: playerFactory })\n        `);\n        return throwError(error);\n      }),\n      shareReplay(1)\n    );\n  }\n\n  return of(playerOrLoader);\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { AnimationCache } from './animation-cache';\n\nexport interface BMEnterFrameEvent {\n  currentTime: number;\n  duration: number;\n  totalTime: number;\n  type: 'enterFrame';\n}\n\nexport interface BMCompleteLoopEvent {\n  type: 'loopComplete';\n  loop: number;\n  playCount: number;\n  frameMult: number;\n}\n\nexport interface BMCompleteEvent {\n  type: 'complete';\n  duration: number;\n}\n\nexport interface BMSegmentStartEvent {\n  type: 'segmentStart';\n  firstFrame: number;\n  totalFrames: number;\n}\n\nexport interface BMDestroyEvent {\n  target: AnimationItem;\n  type: 'destroy';\n}\n\nexport interface BMRenderFrameErrorEvent {\n  type: 'renderFrameError';\n  nativeError: Error;\n  currentTime: number;\n}\n\nexport interface BMConfigErrorEvent {\n  type: 'configError';\n  nativeError: Error;\n}\n\nexport type LottieEvent =\n  | BMEnterFrameEvent\n  | BMCompleteLoopEvent\n  | BMCompleteEvent\n  | BMSegmentStartEvent\n  | BMDestroyEvent\n  | BMRenderFrameErrorEvent\n  | BMConfigErrorEvent\n  | void;\n\nexport type CamelizedAnimationEventName =\n  | 'complete'\n  | 'loopComplete'\n  | 'enterFrame'\n  | 'segmentStart'\n  | 'configReady'\n  | 'dataReady'\n  | 'domLoaded'\n  | 'destroy'\n  | 'error';\n\nexport type EventsMap = { [key in CamelizedAnimationEventName]: AnimationEventName };\n\nexport type AnimationFilename = string;\nexport type AnimationEventName = import('lottie-web').AnimationEventName;\nexport type AnimationItem = import('lottie-web').AnimationItem;\nexport type LottiePlayer = typeof import('lottie-web').default;\n\n/**\n * This looks as follows\n * @example\n * import player from 'lottie-web';\n * const factory = () => player;\n */\ntype LottiePlayerFactory = () => typeof import('lottie-web').default;\n\n/**\n * This looks as follows\n * @example\n * const factory = () => import('lottie-web');\n */\ntype LottieLoader = () => Promise<typeof import('lottie-web')>;\n\nexport type LottiePlayerFactoryOrLoader = LottiePlayerFactory | LottieLoader;\n\nexport interface LottieOptions {\n  player: LottiePlayerFactoryOrLoader;\n  useCache?: boolean;\n}\n\nexport type AnimationConfigWithData = import('lottie-web').AnimationConfigWithData;\nexport type AnimationConfigWithPath = import('lottie-web').AnimationConfigWithPath;\nexport type AnimationOptions = Partial<AnimationConfigWithData> | Partial<AnimationConfigWithPath>;\n\nexport const IS_SAFARI = new InjectionToken<boolean>('IsSafari');\nexport const LOTTIE_OPTIONS = new InjectionToken<LottieOptions>('LottieOptions');\nexport const ANIMATION_CACHE = new InjectionToken<AnimationCache | null>('AnimationCache');\n","import { Injectable, NgZone, Inject, EventEmitter, PLATFORM_ID } from '@angular/core';\nimport { isPlatformServer, DOCUMENT } from '@angular/common';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport {\n  LottiePlayer,\n  LottieOptions,\n  AnimationItem,\n  AnimationOptions,\n  AnimationConfigWithData,\n  AnimationConfigWithPath,\n  IS_SAFARI,\n  LOTTIE_OPTIONS,\n  ANIMATION_CACHE\n} from './symbols';\nimport {\n  awaitConfigAndCache,\n  setPlayerLocationHref,\n  mergeOptionsWithDefault,\n  streamifyPlayerOrLoader\n} from './utils';\nimport { BaseDirective } from './base.directive';\nimport { AnimationCache } from './animation-cache';\nimport { LottieEventsFacade } from './events-facade';\n\n// This has to be dynamic as `Document` interface is not\n// accepted by the ngc compiler\n// @dynamic\n@Injectable()\nexport class AnimationLoader {\n  private player$ = streamifyPlayerOrLoader(this.options.player);\n\n  constructor(\n    private ngZone: NgZone,\n    @Inject(PLATFORM_ID) private platformId: string,\n    @Inject(DOCUMENT) private document: Document,\n    @Inject(IS_SAFARI) private isSafari: boolean,\n    @Inject(LOTTIE_OPTIONS) private options: LottieOptions,\n    @Inject(ANIMATION_CACHE) private animationCache: AnimationCache | null\n  ) {}\n\n  resolveLoaderAndLoadAnimation(\n    options: AnimationOptions | null,\n    container: HTMLElement,\n    eventsFacade: LottieEventsFacade,\n    animationCreated: EventEmitter<AnimationItem>,\n    instance: BaseDirective,\n    destroy$: Subject<void>\n  ) {\n    if (isPlatformServer(this.platformId)) {\n      return;\n    }\n\n    this.player$.pipe(takeUntil(destroy$)).subscribe(player => {\n      const mergedOptions = mergeOptionsWithDefault(options, container, this.animationCache);\n      this.loadAnimation(player, mergedOptions, eventsFacade, animationCreated, instance);\n    });\n  }\n\n  private loadAnimation(\n    player: LottiePlayer,\n    options: AnimationConfigWithData | AnimationConfigWithPath,\n    eventsFacade: LottieEventsFacade,\n    animationCreated: EventEmitter<AnimationItem>,\n    instance: BaseDirective\n  ): void {\n    setPlayerLocationHref(player, this.document.location.href, this.isSafari);\n    const animationItem = this.ngZone.runOutsideAngular(() => player.loadAnimation(options));\n    awaitConfigAndCache(this.animationCache, options, animationItem);\n    // Dispatch `animationCreated` event after animation is loaded successfully\n    animationCreated.emit(animationItem);\n    eventsFacade.addEventListeners(instance, animationItem);\n  }\n}\n","import {\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  Inject,\n  PLATFORM_ID,\n  OnDestroy\n} from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\n\nimport { Subject } from 'rxjs';\n\nimport {\n  AnimationOptions,\n  BMCompleteEvent,\n  BMCompleteLoopEvent,\n  BMEnterFrameEvent,\n  BMSegmentStartEvent,\n  BMDestroyEvent,\n  BMRenderFrameErrorEvent,\n  BMConfigErrorEvent,\n  AnimationItem\n} from './symbols';\nimport { AnimationLoader } from './animation-loader';\nimport { LottieEventsFacade } from './events-facade';\n\n@Directive({ selector: '[lottie]' })\nexport class BaseDirective implements OnDestroy {\n  @Input() options: AnimationOptions | null = null;\n\n  @Input() containerClass: string | null = null;\n\n  @Input() styles: Partial<CSSStyleDeclaration> | null = null;\n\n  @Input() width: string | null = null;\n\n  @Input() height: string | null = null;\n\n  /**\n   * `animationCreated` is dispatched after calling `loadAnimation`\n   */\n  @Output() animationCreated = new EventEmitter<AnimationItem>();\n\n  /**\n   * `complete` is dispatched after completing the last frame\n   */\n  @Output() complete = new EventEmitter<BMCompleteEvent>();\n\n  /**\n   * `loopComplete` is dispatched after completing frame loop\n   */\n  @Output() loopComplete = new EventEmitter<BMCompleteLoopEvent>();\n\n  /**\n   * `enterFrame` is dispatched after entering the new frame\n   */\n  @Output() enterFrame = new EventEmitter<BMEnterFrameEvent>();\n\n  /**\n   * `segmentStart` is dispatched when the new segment is adjusted\n   */\n  @Output() segmentStart = new EventEmitter<BMSegmentStartEvent>();\n\n  /**\n   * Original event name is `config_ready`. `config_ready` is dispatched\n   * after the needed renderer is configured\n   */\n  @Output() configReady = new EventEmitter<void>();\n\n  /**\n   * Original event name is `data_ready`. `data_ready` is dispatched\n   * when all parts of the animation have been loaded\n   */\n  @Output() dataReady = new EventEmitter<void>();\n\n  /**\n   * Original event name is `DOMLoaded`. `DOMLoaded` is dispatched\n   * when elements have been added to the DOM\n   */\n  @Output() domLoaded = new EventEmitter<void>();\n\n  /**\n   * `destroy` will be dispatched in the `ngOnDestroy` hook of the service,\n   * it's useful for releasing resources\n   */\n  @Output() destroy = new EventEmitter<BMDestroyEvent>();\n\n  /**\n   * `error` will be dispatched if the lottie player could not render\n   * some frame or parse config\n   */\n  @Output() error = new EventEmitter<BMRenderFrameErrorEvent | BMConfigErrorEvent>();\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: string,\n    private animationLoader: AnimationLoader\n  ) {}\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  protected setWidthAndHeight(): void {\n    this.width = this.width || '100%';\n    this.height = this.height || '100%';\n  }\n\n  protected loadAnimation(\n    container: HTMLElement | HTMLCanvasElement,\n    eventsFacade: LottieEventsFacade,\n    instance: BaseDirective\n  ): void {\n    if (isPlatformServer(this.platformId)) {\n      return;\n    }\n\n    this.animationLoader.resolveLoaderAndLoadAnimation(\n      this.options,\n      container,\n      eventsFacade,\n      this.animationCreated,\n      instance,\n      this.destroy$\n    );\n  }\n}\n","import {\n  LottieOptions,\n  AnimationItem,\n  AnimationConfigWithData,\n  AnimationConfigWithPath\n} from './symbols';\nimport { isAnimationConfigWithData } from './utils';\n\nexport class AnimationCache {\n  private cache = new Map<string, unknown>();\n\n  static create(options: LottieOptions): AnimationCache | null {\n    if (options.useCache) {\n      return new AnimationCache();\n    }\n\n    return null;\n  }\n\n  transformOptions(\n    options: AnimationConfigWithData | AnimationConfigWithPath\n  ): AnimationConfigWithData | AnimationConfigWithPath {\n    const path = (options as AnimationConfigWithPath).path;\n    if (path && this.cache.has(path)) {\n      delete (options as AnimationConfigWithPath).path;\n      (options as AnimationConfigWithData).animationData = this.cache.get(path);\n    }\n    return options;\n  }\n\n  set(\n    options: AnimationConfigWithData | AnimationConfigWithPath,\n    animationItem: AnimationItem\n  ): void {\n    if (isAnimationConfigWithData(options)) {\n      return;\n    }\n\n    const animationData = animationItem['animationData'];\n    this.cache.set(options.path!, animationData);\n  }\n}\n","import { OnDestroy, Injectable, NgZone, Inject, EventEmitter, PLATFORM_ID } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\n\nimport { BaseDirective } from './base.directive';\nimport { EventsMap, LottieEvent, AnimationItem } from './symbols';\n\n/**\n * Returns only those `EventEmitter` instances that has attached observers\n */\nfunction getObservedEventEmitters(instance: BaseDirective, eventsMap: EventsMap) {\n  return Object.keys(instance)\n    .map(key => [key, instance[key]])\n    .filter(\n      ([key, property]) =>\n        property instanceof EventEmitter &&\n        property.observers.length > 0 &&\n        eventsMap.hasOwnProperty(key)\n    )\n    .map(([key, eventEmitter]) => ({\n      eventEmitter,\n      name: eventsMap[key]\n    }));\n}\n\n@Injectable()\nexport class LottieEventsFacade implements OnDestroy {\n  /**\n   * @see https://github.com/airbnb/lottie-web#events\n   */\n  private eventsMap: EventsMap = {\n    complete: 'complete',\n    loopComplete: 'loopComplete',\n    enterFrame: 'enterFrame',\n    segmentStart: 'segmentStart',\n    configReady: 'config_ready',\n    dataReady: 'data_ready',\n    domLoaded: 'DOMLoaded',\n    destroy: 'destroy',\n    error: 'error'\n  };\n\n  private animationItem: AnimationItem | null = null;\n\n  constructor(private ngZone: NgZone, @Inject(PLATFORM_ID) private platformId: string) {}\n\n  ngOnDestroy(): void {\n    this.dispose();\n  }\n\n  addEventListeners(instance: BaseDirective, animationItem: AnimationItem): void {\n    this.animationItem = animationItem;\n    // `AnimationItem` triggers different events every ms, we have to listen\n    // them outside Angular's context, thus it won't affect performance\n    this.ngZone.runOutsideAngular(() => this.addEventListenersToObservedEventEmitters(instance));\n  }\n\n  private dispose(): void {\n    // The `ng-lottie` component or the `lottie` directive can be destroyed\n    // before the `animationItem` is set, thus it will fail with\n    // `Cannot read property 'destroy' of null`.\n    // Potentially it can happen if the directive gets destroyed before change\n    // detection is run.\n    if (isPlatformServer(this.platformId) || this.animationItem === null) {\n      return;\n    }\n\n    // `destroy()` will remove all events listeners\n    this.animationItem.destroy();\n    this.animationItem = null;\n  }\n\n  private addEventListenersToObservedEventEmitters(instance: BaseDirective): void {\n    const observedEmitters = getObservedEventEmitters(instance, this.eventsMap);\n\n    for (const { name, eventEmitter } of observedEmitters) {\n      this.animationItem!.addEventListener(name, (event: LottieEvent) => {\n        eventEmitter.emit(event);\n      });\n    }\n  }\n}\n","import { Directive, OnInit, Inject, Self, ElementRef, PLATFORM_ID } from '@angular/core';\n\nimport { BaseDirective } from './base.directive';\nimport { AnimationLoader } from './animation-loader';\nimport { LottieEventsFacade } from './events-facade';\n\n@Directive({\n  selector: '[lottie]',\n  providers: [LottieEventsFacade]\n})\nexport class LottieDirective extends BaseDirective implements OnInit {\n  constructor(\n    @Inject(PLATFORM_ID) platformId: string,\n    @Self() private host: ElementRef<HTMLElement>,\n    @Self() private eventsFacade: LottieEventsFacade,\n    animationLoader: AnimationLoader\n  ) {\n    super(platformId, animationLoader);\n  }\n\n  ngOnInit(): void {\n    super.loadAnimation(this.host.nativeElement, this.eventsFacade, this);\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  Inject,\n  ElementRef,\n  ViewChild,\n  Self,\n  OnChanges,\n  SimpleChanges,\n  Renderer2,\n  PLATFORM_ID\n} from '@angular/core';\n\nimport { BaseDirective } from './base.directive';\nimport { AnimationLoader } from './animation-loader';\nimport { LottieEventsFacade } from './events-facade';\n\n@Component({\n  selector: 'ng-lottie',\n  template: `\n    <div #container [style.width]=\"width\" [style.height]=\"height\" [ngStyle]=\"styles\"></div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [LottieEventsFacade]\n})\nexport class LottieComponent extends BaseDirective implements OnChanges, OnInit {\n  @ViewChild('container', { static: true }) container: ElementRef<HTMLElement> = null!;\n\n  constructor(\n    private renderer: Renderer2,\n    @Inject(PLATFORM_ID) platformId: string,\n    @Self() private eventsFacade: LottieEventsFacade,\n    animationLoader: AnimationLoader\n  ) {\n    super(platformId, animationLoader);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const containerClass = changes.containerClass;\n\n    if (containerClass === undefined || typeof containerClass.currentValue !== 'string') {\n      return;\n    }\n\n    this.renderer.addClass(this.container.nativeElement, containerClass.currentValue);\n  }\n\n  ngOnInit(): void {\n    super.setWidthAndHeight();\n    super.loadAnimation(this.container.nativeElement, this.eventsFacade, this);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { isSafariFactory } from './utils';\nimport { BaseDirective } from './base.directive';\nimport { AnimationCache } from './animation-cache';\nimport { AnimationLoader } from './animation-loader';\nimport { LottieDirective } from './lottie.directive';\nimport { LottieComponent } from './lottie.component';\nimport { LottieOptions, LOTTIE_OPTIONS, IS_SAFARI, ANIMATION_CACHE } from './symbols';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [BaseDirective, LottieDirective, LottieComponent],\n  exports: [BaseDirective, LottieDirective, LottieComponent]\n})\nexport class LottieModule {\n  static forRoot(options: LottieOptions): ModuleWithProviders<LottieModule> {\n    return {\n      ngModule: LottieModule,\n      providers: [\n        AnimationLoader,\n        {\n          provide: LOTTIE_OPTIONS,\n          useValue: options\n        },\n        {\n          provide: IS_SAFARI,\n          useFactory: isSafariFactory\n        },\n        {\n          provide: ANIMATION_CACHE,\n          useFactory: AnimationCache.create,\n          deps: [LOTTIE_OPTIONS]\n        }\n      ]\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TransferState, makeStateKey } from '@angular/platform-browser';\n\nimport { AnimationFilename } from './symbols';\nimport { transformAnimationFilenameToKey } from './utils';\n\n@Injectable({ providedIn: 'root' })\nexport class LottieTransferState {\n  constructor(private transferState: TransferState) {}\n\n  get<T>(animation: AnimationFilename): T | null {\n    const animationKey = transformAnimationFilenameToKey(animation);\n    const stateKey = makeStateKey<T>(animationKey);\n    return this.transferState.get(stateKey, null);\n  }\n}\n"],"names":[],"mappings":"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"}