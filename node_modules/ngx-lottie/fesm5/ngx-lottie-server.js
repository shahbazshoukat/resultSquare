import { InjectionToken, APP_INITIALIZER, NgModule } from '@angular/core';
import { makeStateKey, TransferState } from '@angular/platform-browser';
import { join } from 'path';
import { transformAnimationFilenameToKey } from 'ngx-lottie';
import { readFile } from 'fs';

/**
 * @fileoverview added by tsickle
 * Generated from: utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} path
 * @return {?}
 */
function readFileWithAnimationData(path) {
    return new Promise((/**
     * @param {?} resolve
     * @param {?} reject
     * @return {?}
     */
    function (resolve, reject) {
        readFile(path, (/**
         * @param {?} error
         * @param {?} data
         * @return {?}
         */
        function (error, data) {
            if (error) {
                return reject(error);
            }
            resolve(data.toString());
        }));
    }));
}

/**
 * @fileoverview added by tsickle
 * Generated from: internals.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} transferState
 * @param {?} animations
 * @param {?} pathsToAnimations
 * @return {?}
 */
function readAndTransferAnimationData(transferState, animations, pathsToAnimations) {
    /** @type {?} */
    var sources = [];
    var _loop_1 = function (i, length_1) {
        /** @type {?} */
        var path = pathsToAnimations[i];
        /** @type {?} */
        var source = readFileWithAnimationData(path).then((/**
         * @param {?} animationData
         * @return {?}
         */
        function (animationData) {
            transferAnimationData(transferState, animations[i], animationData);
        }));
        sources.push(source);
    };
    for (var i = 0, length_1 = animations.length; i < length_1; i++) {
        _loop_1(i, length_1);
    }
    return sources;
}
/**
 * @param {?} state
 * @param {?} animation
 * @param {?} animationData
 * @return {?}
 */
function transferAnimationData(state, animation, animationData) {
    animation = transformAnimationFilenameToKey(animation);
    /** @type {?} */
    var key = makeStateKey(animation);
    state.set(key, JSON.parse(animationData));
}
/**
 * @param {?} options
 * @param {?} state
 * @return {?}
 */
function appInitializerFactory(options, state) {
    /** @type {?} */
    var pathsToAnimations = resolveLottiePaths(options);
    /** @type {?} */
    var sources = readAndTransferAnimationData(state, options.preloadAnimations.animations, pathsToAnimations);
    return (/**
     * @return {?}
     */
    function () { return Promise.all(sources); });
}
/**
 * @param {?} __0
 * @return {?}
 */
function resolveLottiePaths(_a) {
    var preloadAnimations = _a.preloadAnimations;
    var folder = preloadAnimations.folder, animations = preloadAnimations.animations;
    /** @type {?} */
    var path = join(process.cwd(), folder);
    return animations.map((/**
     * @param {?} animation
     * @return {?}
     */
    function (animation) { return join(path, animation); }));
}

/**
 * @fileoverview added by tsickle
 * Generated from: lottie-server.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var LOTTIE_SERVER_OPTIONS = new InjectionToken('LottieServerOptions');
var LottieServerModule = /** @class */ (function () {
    function LottieServerModule() {
    }
    /**
     * @param {?} options
     * @return {?}
     */
    LottieServerModule.forRoot = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return {
            ngModule: LottieServerModule,
            providers: [
                {
                    provide: LOTTIE_SERVER_OPTIONS,
                    useValue: options
                },
                {
                    provide: APP_INITIALIZER,
                    useFactory: appInitializerFactory,
                    multi: true,
                    deps: [LOTTIE_SERVER_OPTIONS, TransferState]
                }
            ]
        };
    };
    LottieServerModule.decorators = [
        { type: NgModule }
    ];
    return LottieServerModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: ngx-lottie-server.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { LottieServerModule, LOTTIE_SERVER_OPTIONS as ɵa, appInitializerFactory as ɵb };
//# sourceMappingURL=ngx-lottie-server.js.map
